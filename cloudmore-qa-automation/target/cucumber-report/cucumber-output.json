[
  {
    "line": 5,
    "elements": [
      {
        "start_timestamp": "2023-02-20T09:40:55.347Z",
        "before": [
          {
            "result": {
              "duration": 13014000,
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.beforeScenario(io.cucumber.java.Scenario)"
            }
          }
        ],
        "line": 8,
        "name": "Verify company logo and menu items are displayed on Home Page.",
        "description": "",
        "id": "company-logo-and-menu-items-are-displayed-on-next-pages:-solutions--integrations--resources--pricing--company.;verify-company-logo-and-menu-items-are-displayed-on-home-page.",
        "after": [
          {
            "result": {
              "duration": 5009400,
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.afterScenario()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 7272635600,
              "status": "passed"
            },
            "line": 9,
            "name": "User direct to the Home Page",
            "match": {
              "location": "com.cloudmore.testSteps.ui.HomePageTestSteps.userDirectToTheHomePage()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2403018200,
              "status": "passed"
            },
            "line": 10,
            "name": "User Accepts the Cookie Consent",
            "match": {
              "location": "com.cloudmore.testSteps.ui.HomePageTestSteps.acceptTheCookies()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 66462400,
              "status": "passed"
            },
            "line": 11,
            "name": "Verify the HomePage availability",
            "match": {
              "location": "com.cloudmore.testSteps.ui.HomePageTestSteps.verifying_home_page_is_available()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 66812400,
              "status": "passed"
            },
            "line": 12,
            "name": "Verifying the Company logo is visible from the Home page",
            "match": {
              "location": "com.cloudmore.testSteps.ui.HomePageTestSteps.verifyCompanyLogo()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 81363300,
              "status": "passed"
            },
            "line": 13,
            "name": "Verifying the \"Solutions\" Menu link is visible from the Home page",
            "match": {
              "arguments": [
                {
                  "val": "\"Solutions\"",
                  "offset": 14
                }
              ],
              "location": "com.cloudmore.testSteps.ui.HomePageTestSteps.verifyMenuLinks(java.lang.String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 80958600,
              "status": "passed"
            },
            "line": 14,
            "name": "Verifying the \"Company\" Menu link is visible from the Home page",
            "match": {
              "arguments": [
                {
                  "val": "\"Company\"",
                  "offset": 14
                }
              ],
              "location": "com.cloudmore.testSteps.ui.HomePageTestSteps.verifyMenuLinks(java.lang.String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 76045300,
              "status": "passed"
            },
            "line": 15,
            "name": "Verifying the \"Integrations\" Menu link is visible from the Home page",
            "match": {
              "arguments": [
                {
                  "val": "\"Integrations\"",
                  "offset": 14
                }
              ],
              "location": "com.cloudmore.testSteps.ui.HomePageTestSteps.verifyMenuLinks(java.lang.String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 83620000,
              "status": "passed"
            },
            "line": 16,
            "name": "Verifying the \"Resources\" Menu link is visible from the Home page",
            "match": {
              "arguments": [
                {
                  "val": "\"Resources\"",
                  "offset": 14
                }
              ],
              "location": "com.cloudmore.testSteps.ui.HomePageTestSteps.verifyMenuLinks(java.lang.String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 77959000,
              "status": "passed"
            },
            "line": 17,
            "name": "Verifying the \"Pricing\" Menu link is visible from the Home page",
            "match": {
              "arguments": [
                {
                  "val": "\"Pricing\"",
                  "offset": 14
                }
              ],
              "location": "com.cloudmore.testSteps.ui.HomePageTestSteps.verifyMenuLinks(java.lang.String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@ui"
          },
          {
            "name": "@QuestionOne"
          },
          {
            "name": "@assignment"
          }
        ]
      },
      {
        "start_timestamp": "2023-02-20T09:41:06.690Z",
        "before": [
          {
            "result": {
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.beforeScenario(io.cucumber.java.Scenario)"
            }
          }
        ],
        "line": 19,
        "name": "Verify company logo and menu items are displayed on Solutions Page.",
        "description": "",
        "id": "company-logo-and-menu-items-are-displayed-on-next-pages:-solutions--integrations--resources--pricing--company.;verify-company-logo-and-menu-items-are-displayed-on-solutions-page.",
        "after": [
          {
            "result": {
              "duration": 1001500,
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.afterScenario()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2077427700,
              "status": "passed"
            },
            "line": 20,
            "name": "User direct to the Home Page",
            "match": {
              "location": "com.cloudmore.testSteps.ui.HomePageTestSteps.userDirectToTheHomePage()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3013266300,
              "status": "passed"
            },
            "line": 21,
            "name": "Navigate to \"Solutions\" page from home Page",
            "match": {
              "arguments": [
                {
                  "val": "\"Solutions\"",
                  "offset": 12
                }
              ],
              "location": "com.cloudmore.testSteps.ui.HomePageTestSteps.navigateToTheURL(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 43816000,
              "status": "passed"
            },
            "line": 22,
            "name": "Verify the Solutions Page availability",
            "match": {
              "location": "com.cloudmore.testSteps.ui.SolutionsPageTestSteps.verifying_solution_page_is_available()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 84041900,
              "status": "passed"
            },
            "line": 23,
            "name": "Verifying the Company logo is visible from the Solutions page",
            "match": {
              "location": "com.cloudmore.testSteps.ui.SolutionsPageTestSteps.verifyCompanyLogo()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 77031300,
              "status": "passed"
            },
            "line": 24,
            "name": "Verifying the \"Solutions\" Menu link is visible from the Solutions page",
            "match": {
              "arguments": [
                {
                  "val": "\"Solutions\"",
                  "offset": 14
                }
              ],
              "location": "com.cloudmore.testSteps.ui.SolutionsPageTestSteps.verifyMenuLinks(java.lang.String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 71956000,
              "status": "passed"
            },
            "line": 25,
            "name": "Verifying the \"Company\" Menu link is visible from the Solutions page",
            "match": {
              "arguments": [
                {
                  "val": "\"Company\"",
                  "offset": 14
                }
              ],
              "location": "com.cloudmore.testSteps.ui.SolutionsPageTestSteps.verifyMenuLinks(java.lang.String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 82085000,
              "status": "passed"
            },
            "line": 26,
            "name": "Verifying the \"Integrations\" Menu link is visible from the Solutions page",
            "match": {
              "arguments": [
                {
                  "val": "\"Integrations\"",
                  "offset": 14
                }
              ],
              "location": "com.cloudmore.testSteps.ui.SolutionsPageTestSteps.verifyMenuLinks(java.lang.String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 79231200,
              "status": "passed"
            },
            "line": 27,
            "name": "Verifying the \"Resources\" Menu link is visible from the Solutions page",
            "match": {
              "arguments": [
                {
                  "val": "\"Resources\"",
                  "offset": 14
                }
              ],
              "location": "com.cloudmore.testSteps.ui.SolutionsPageTestSteps.verifyMenuLinks(java.lang.String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 74530300,
              "status": "passed"
            },
            "line": 28,
            "name": "Verifying the \"Pricing\" Menu link is visible from the Solutions page",
            "match": {
              "arguments": [
                {
                  "val": "\"Pricing\"",
                  "offset": 14
                }
              ],
              "location": "com.cloudmore.testSteps.ui.SolutionsPageTestSteps.verifyMenuLinks(java.lang.String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@ui"
          },
          {
            "name": "@QuestionOne"
          },
          {
            "name": "@assignment"
          }
        ]
      },
      {
        "start_timestamp": "2023-02-20T09:41:12.400Z",
        "before": [
          {
            "result": {
              "duration": 1178700,
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.beforeScenario(io.cucumber.java.Scenario)"
            }
          }
        ],
        "line": 30,
        "name": "Verify company logo and menu items are displayed on Company Page.",
        "description": "",
        "id": "company-logo-and-menu-items-are-displayed-on-next-pages:-solutions--integrations--resources--pricing--company.;verify-company-logo-and-menu-items-are-displayed-on-company-page.",
        "after": [
          {
            "result": {
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.afterScenario()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1621050300,
              "status": "passed"
            },
            "line": 31,
            "name": "User direct to the Home Page",
            "match": {
              "location": "com.cloudmore.testSteps.ui.HomePageTestSteps.userDirectToTheHomePage()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1903656300,
              "status": "passed"
            },
            "line": 32,
            "name": "Navigate to \"Company\" page from home Page",
            "match": {
              "arguments": [
                {
                  "val": "\"Company\"",
                  "offset": 12
                }
              ],
              "location": "com.cloudmore.testSteps.ui.HomePageTestSteps.navigateToTheURL(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 70016900,
              "status": "passed"
            },
            "line": 33,
            "name": "Verify the Company Page availability",
            "match": {
              "location": "com.cloudmore.testSteps.ui.CompanyPageTestSteps.verifying_solution_page_is_available()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 76629100,
              "status": "passed"
            },
            "line": 34,
            "name": "Verifying the Company logo is visible from the Company page",
            "match": {
              "location": "com.cloudmore.testSteps.ui.CompanyPageTestSteps.verifyCompanyLogo()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 70823200,
              "status": "passed"
            },
            "line": 35,
            "name": "Verifying the \"Solutions\" Menu link is visible from the Company page",
            "match": {
              "arguments": [
                {
                  "val": "\"Solutions\"",
                  "offset": 14
                }
              ],
              "location": "com.cloudmore.testSteps.ui.CompanyPageTestSteps.verifyMenuLinks(java.lang.String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 75870200,
              "status": "passed"
            },
            "line": 36,
            "name": "Verifying the \"Company\" Menu link is visible from the Company page",
            "match": {
              "arguments": [
                {
                  "val": "\"Company\"",
                  "offset": 14
                }
              ],
              "location": "com.cloudmore.testSteps.ui.CompanyPageTestSteps.verifyMenuLinks(java.lang.String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 91746700,
              "status": "passed"
            },
            "line": 37,
            "name": "Verifying the \"Integrations\" Menu link is visible from the Company page",
            "match": {
              "arguments": [
                {
                  "val": "\"Integrations\"",
                  "offset": 14
                }
              ],
              "location": "com.cloudmore.testSteps.ui.CompanyPageTestSteps.verifyMenuLinks(java.lang.String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 47479400,
              "status": "passed"
            },
            "line": 38,
            "name": "Verifying the \"Resources\" Menu link is visible from the Company page",
            "match": {
              "arguments": [
                {
                  "val": "\"Resources\"",
                  "offset": 14
                }
              ],
              "location": "com.cloudmore.testSteps.ui.CompanyPageTestSteps.verifyMenuLinks(java.lang.String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 36996900,
              "status": "passed"
            },
            "line": 39,
            "name": "Verifying the \"Pricing\" Menu link is visible from the Company page",
            "match": {
              "arguments": [
                {
                  "val": "\"Pricing\"",
                  "offset": 14
                }
              ],
              "location": "com.cloudmore.testSteps.ui.CompanyPageTestSteps.verifyMenuLinks(java.lang.String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@ui"
          },
          {
            "name": "@QuestionOne"
          },
          {
            "name": "@assignment"
          }
        ]
      },
      {
        "start_timestamp": "2023-02-20T09:41:16.466Z",
        "before": [
          {
            "result": {
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.beforeScenario(io.cucumber.java.Scenario)"
            }
          }
        ],
        "line": 41,
        "name": "Verify company logo and menu items are displayed on Integrations Page.",
        "description": "",
        "id": "company-logo-and-menu-items-are-displayed-on-next-pages:-solutions--integrations--resources--pricing--company.;verify-company-logo-and-menu-items-are-displayed-on-integrations-page.",
        "after": [
          {
            "result": {
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.afterScenario()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 1594554700,
              "status": "passed"
            },
            "line": 42,
            "name": "User direct to the Home Page",
            "match": {
              "location": "com.cloudmore.testSteps.ui.HomePageTestSteps.userDirectToTheHomePage()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2632577900,
              "status": "passed"
            },
            "line": 43,
            "name": "Navigate to \"Integrations\" page from home Page",
            "match": {
              "arguments": [
                {
                  "val": "\"Integrations\"",
                  "offset": 12
                }
              ],
              "location": "com.cloudmore.testSteps.ui.HomePageTestSteps.navigateToTheURL(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 52438300,
              "status": "passed"
            },
            "line": 44,
            "name": "Verify the Integrations Page availability",
            "match": {
              "location": "com.cloudmore.testSteps.ui.IntegrationsPageTestSteps.verifying_solution_page_is_available()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 72657000,
              "status": "passed"
            },
            "line": 45,
            "name": "Verifying the Company logo is visible from the Integrations page",
            "match": {
              "location": "com.cloudmore.testSteps.ui.IntegrationsPageTestSteps.verifyCompanyLogo()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 73789100,
              "status": "passed"
            },
            "line": 46,
            "name": "Verifying the \"Solutions\" Menu link is visible from the Integrations page",
            "match": {
              "arguments": [
                {
                  "val": "\"Solutions\"",
                  "offset": 14
                }
              ],
              "location": "com.cloudmore.testSteps.ui.IntegrationsPageTestSteps.verifyMenuLinks(java.lang.String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 75364100,
              "status": "passed"
            },
            "line": 47,
            "name": "Verifying the \"Company\" Menu link is visible from the Integrations page",
            "match": {
              "arguments": [
                {
                  "val": "\"Company\"",
                  "offset": 14
                }
              ],
              "location": "com.cloudmore.testSteps.ui.IntegrationsPageTestSteps.verifyMenuLinks(java.lang.String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 70632300,
              "status": "passed"
            },
            "line": 48,
            "name": "Verifying the \"Integrations\" Menu link is visible from the Integrations page",
            "match": {
              "arguments": [
                {
                  "val": "\"Integrations\"",
                  "offset": 14
                }
              ],
              "location": "com.cloudmore.testSteps.ui.IntegrationsPageTestSteps.verifyMenuLinks(java.lang.String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 80370400,
              "status": "passed"
            },
            "line": 49,
            "name": "Verifying the \"Resources\" Menu link is visible from the Integrations page",
            "match": {
              "arguments": [
                {
                  "val": "\"Resources\"",
                  "offset": 14
                }
              ],
              "location": "com.cloudmore.testSteps.ui.IntegrationsPageTestSteps.verifyMenuLinks(java.lang.String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 66962200,
              "status": "passed"
            },
            "line": 50,
            "name": "Verifying the \"Pricing\" Menu link is visible from the Integrations page",
            "match": {
              "arguments": [
                {
                  "val": "\"Pricing\"",
                  "offset": 14
                }
              ],
              "location": "com.cloudmore.testSteps.ui.IntegrationsPageTestSteps.verifyMenuLinks(java.lang.String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@ui"
          },
          {
            "name": "@QuestionOne"
          },
          {
            "name": "@assignment"
          }
        ]
      },
      {
        "start_timestamp": "2023-02-20T09:41:21.267Z",
        "before": [
          {
            "result": {
              "duration": 999700,
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.beforeScenario(io.cucumber.java.Scenario)"
            }
          }
        ],
        "line": 52,
        "name": "Verify company logo and menu items are displayed on Resources Page.",
        "description": "",
        "id": "company-logo-and-menu-items-are-displayed-on-next-pages:-solutions--integrations--resources--pricing--company.;verify-company-logo-and-menu-items-are-displayed-on-resources-page.",
        "after": [
          {
            "result": {
              "duration": 590100,
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.afterScenario()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 581322200,
              "status": "passed"
            },
            "line": 53,
            "name": "User direct to the Home Page",
            "match": {
              "location": "com.cloudmore.testSteps.ui.HomePageTestSteps.userDirectToTheHomePage()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2909473500,
              "status": "passed"
            },
            "line": 54,
            "name": "Navigate to \"Resources\" page from home Page",
            "match": {
              "arguments": [
                {
                  "val": "\"Resources\"",
                  "offset": 12
                }
              ],
              "location": "com.cloudmore.testSteps.ui.HomePageTestSteps.navigateToTheURL(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 47001700,
              "status": "passed"
            },
            "line": 55,
            "name": "Verify the Resources Page availability",
            "match": {
              "location": "com.cloudmore.testSteps.ui.ResourcesPageTestSteps.verifying_solution_page_is_available()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 70577500,
              "status": "passed"
            },
            "line": 56,
            "name": "Verifying the Company logo is visible from the Resources page",
            "match": {
              "location": "com.cloudmore.testSteps.ui.ResourcesPageTestSteps.verifyCompanyLogo()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 72736400,
              "status": "passed"
            },
            "line": 57,
            "name": "Verifying the \"Solutions\" Menu link is visible from the Resources page",
            "match": {
              "arguments": [
                {
                  "val": "\"Solutions\"",
                  "offset": 14
                }
              ],
              "location": "com.cloudmore.testSteps.ui.ResourcesPageTestSteps.verifyMenuLinks(java.lang.String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 63655700,
              "status": "passed"
            },
            "line": 58,
            "name": "Verifying the \"Company\" Menu link is visible from the Resources page",
            "match": {
              "arguments": [
                {
                  "val": "\"Company\"",
                  "offset": 14
                }
              ],
              "location": "com.cloudmore.testSteps.ui.ResourcesPageTestSteps.verifyMenuLinks(java.lang.String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 41002300,
              "status": "passed"
            },
            "line": 59,
            "name": "Verifying the \"Integrations\" Menu link is visible from the Resources page",
            "match": {
              "arguments": [
                {
                  "val": "\"Integrations\"",
                  "offset": 14
                }
              ],
              "location": "com.cloudmore.testSteps.ui.ResourcesPageTestSteps.verifyMenuLinks(java.lang.String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 75872000,
              "status": "passed"
            },
            "line": 60,
            "name": "Verifying the \"Resources\" Menu link is visible from the Resources page",
            "match": {
              "arguments": [
                {
                  "val": "\"Resources\"",
                  "offset": 14
                }
              ],
              "location": "com.cloudmore.testSteps.ui.ResourcesPageTestSteps.verifyMenuLinks(java.lang.String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 71013800,
              "status": "passed"
            },
            "line": 61,
            "name": "Verifying the \"Pricing\" Menu link is visible from the Resources page",
            "match": {
              "arguments": [
                {
                  "val": "\"Pricing\"",
                  "offset": 14
                }
              ],
              "location": "com.cloudmore.testSteps.ui.ResourcesPageTestSteps.verifyMenuLinks(java.lang.String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@ui"
          },
          {
            "name": "@QuestionOne"
          },
          {
            "name": "@assignment"
          }
        ]
      },
      {
        "start_timestamp": "2023-02-20T09:41:25.297Z",
        "before": [
          {
            "result": {
              "duration": 1003600,
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.beforeScenario(io.cucumber.java.Scenario)"
            }
          }
        ],
        "line": 63,
        "name": "Verify company logo and menu items are displayed on Pricing Page.",
        "description": "",
        "id": "company-logo-and-menu-items-are-displayed-on-next-pages:-solutions--integrations--resources--pricing--company.;verify-company-logo-and-menu-items-are-displayed-on-pricing-page.",
        "after": [
          {
            "result": {
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.afterScenario()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 2097292700,
              "status": "passed"
            },
            "line": 64,
            "name": "User direct to the Home Page",
            "match": {
              "location": "com.cloudmore.testSteps.ui.HomePageTestSteps.userDirectToTheHomePage()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3849883200,
              "status": "passed"
            },
            "line": 65,
            "name": "Navigate to \"Pricing\" page from home Page",
            "match": {
              "arguments": [
                {
                  "val": "\"Pricing\"",
                  "offset": 12
                }
              ],
              "location": "com.cloudmore.testSteps.ui.HomePageTestSteps.navigateToTheURL(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 49684500,
              "status": "passed"
            },
            "line": 66,
            "name": "Verify the Pricing Page availability",
            "match": {
              "location": "com.cloudmore.testSteps.ui.PricingPageTestSteps.verifying_solution_page_is_available()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 67594400,
              "status": "passed"
            },
            "line": 67,
            "name": "Verifying the Company logo is visible from the Pricing page",
            "match": {
              "location": "com.cloudmore.testSteps.ui.PricingPageTestSteps.verifyCompanyLogo()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 72143400,
              "status": "passed"
            },
            "line": 68,
            "name": "Verifying the \"Solutions\" Menu link is visible from the Pricing page",
            "match": {
              "arguments": [
                {
                  "val": "\"Solutions\"",
                  "offset": 14
                }
              ],
              "location": "com.cloudmore.testSteps.ui.PricingPageTestSteps.verifyMenuLinks(java.lang.String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 72830900,
              "status": "passed"
            },
            "line": 69,
            "name": "Verifying the \"Company\" Menu link is visible from the Pricing page",
            "match": {
              "arguments": [
                {
                  "val": "\"Company\"",
                  "offset": 14
                }
              ],
              "location": "com.cloudmore.testSteps.ui.PricingPageTestSteps.verifyMenuLinks(java.lang.String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 71422100,
              "status": "passed"
            },
            "line": 70,
            "name": "Verifying the \"Integrations\" Menu link is visible from the Pricing page",
            "match": {
              "arguments": [
                {
                  "val": "\"Integrations\"",
                  "offset": 14
                }
              ],
              "location": "com.cloudmore.testSteps.ui.PricingPageTestSteps.verifyMenuLinks(java.lang.String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 84722100,
              "status": "passed"
            },
            "line": 71,
            "name": "Verifying the \"Resources\" Menu link is visible from the Pricing page",
            "match": {
              "arguments": [
                {
                  "val": "\"Resources\"",
                  "offset": 14
                }
              ],
              "location": "com.cloudmore.testSteps.ui.PricingPageTestSteps.verifyMenuLinks(java.lang.String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 46437700,
              "status": "passed"
            },
            "line": 72,
            "name": "Verifying the \"Pricing\" Menu link is visible from the Pricing page",
            "match": {
              "arguments": [
                {
                  "val": "\"Pricing\"",
                  "offset": 14
                }
              ],
              "location": "com.cloudmore.testSteps.ui.PricingPageTestSteps.verifyMenuLinks(java.lang.String)"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@ui"
          },
          {
            "name": "@QuestionOne"
          },
          {
            "name": "@assignment"
          }
        ]
      }
    ],
    "name": "Company logo and menu items are displayed on next pages: Solutions, Integrations, Resources, Pricing, Company.",
    "description": "",
    "id": "company-logo-and-menu-items-are-displayed-on-next-pages:-solutions--integrations--resources--pricing--company.",
    "keyword": "Feature",
    "uri": "file:src/test/resources/featureFiles/CompanyLogAndMenuItem.feature",
    "tags": [
      {
        "name": "@ui",
        "type": "Tag",
        "location": {
          "line": 4,
          "column": 1
        }
      },
      {
        "name": "@QuestionOne",
        "type": "Tag",
        "location": {
          "line": 4,
          "column": 5
        }
      },
      {
        "name": "@assignment",
        "type": "Tag",
        "location": {
          "line": 4,
          "column": 18
        }
      }
    ]
  },
  {
    "line": 6,
    "elements": [
      {
        "start_timestamp": "2023-02-20T09:41:31.762Z",
        "before": [
          {
            "result": {
              "duration": 1004300,
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.beforeScenario(io.cucumber.java.Scenario)"
            }
          }
        ],
        "line": 25,
        "name": "Verify Search Results have more than 3 items in the list",
        "description": "",
        "id": "test-search-page-page-for-mobile-and-desktop-size-screens-with-number-of-items-in-the-list;verify-search-results-have-more-than-3-items-in-the-list;;2",
        "after": [
          {
            "result": {
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.afterScenario()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1729371900,
              "status": "passed"
            },
            "line": 9,
            "name": "User direct to the Home Page",
            "match": {
              "location": "com.cloudmore.testSteps.ui.HomePageTestSteps.userDirectToTheHomePage()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 66266900,
              "status": "passed"
            },
            "line": 10,
            "name": "Verify the HomePage availability",
            "match": {
              "location": "com.cloudmore.testSteps.ui.HomePageTestSteps.verifying_home_page_is_available()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2143820400,
              "status": "passed"
            },
            "line": 11,
            "name": "User Accepts the Cookie Consent",
            "match": {
              "location": "com.cloudmore.testSteps.ui.HomePageTestSteps.acceptTheCookies()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 138018400,
              "status": "passed"
            },
            "line": 12,
            "name": "Navigate to \"Search\" page from home Page",
            "match": {
              "arguments": [
                {
                  "val": "\"Search\"",
                  "offset": 12
                }
              ],
              "location": "com.cloudmore.testSteps.ui.HomePageTestSteps.navigateToTheURL(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 49253800,
              "status": "passed"
            },
            "line": 13,
            "name": "Verify the Search Page availability",
            "match": {
              "location": "com.cloudmore.testSteps.ui.SearchPageTestSteps.verifying_home_page_is_available()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 249068900,
              "status": "passed"
            },
            "line": 14,
            "name": "User set the Web Page resolution into \"DESKTOP\" size",
            "match": {
              "arguments": [
                {
                  "val": "\"DESKTOP\"",
                  "offset": 38
                }
              ],
              "location": "com.cloudmore.testSteps.CommonSteps.userSetWindwSize(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 220804900,
              "status": "passed"
            },
            "line": 15,
            "name": "User entered \"Azure\" as search keyword on the search text field",
            "match": {
              "arguments": [
                {
                  "val": "\"Azure\"",
                  "offset": 13
                }
              ],
              "location": "com.cloudmore.testSteps.ui.SearchPageTestSteps.user_entered_on_search_text_field(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 2032385200,
              "status": "passed"
            },
            "line": 16,
            "name": "User click the search button",
            "match": {
              "location": "com.cloudmore.testSteps.ui.SearchPageTestSteps.click_the_search_button()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 37857100,
              "status": "passed"
            },
            "line": 17,
            "name": "Verify that the search results page is available",
            "match": {
              "location": "com.cloudmore.testSteps.ui.SearchPageTestSteps.verify_searchResults_page_loaded()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7993100,
              "status": "passed"
            },
            "line": 18,
            "name": "Verifying the Search Page URL After searching \"Azure\"",
            "match": {
              "arguments": [
                {
                  "val": "\"Azure\"",
                  "offset": 46
                }
              ],
              "location": "com.cloudmore.testSteps.ui.SearchPageTestSteps.verify_search_page_URL(java.lang.String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9997300,
              "status": "passed"
            },
            "line": 19,
            "name": "Verifying the Search Page Title After searching \"Azure\"",
            "match": {
              "arguments": [
                {
                  "val": "\"Azure\"",
                  "offset": 48
                }
              ],
              "location": "com.cloudmore.testSteps.ui.SearchPageTestSteps.verify_search_page_title(java.lang.String)"
            },
            "keyword": "And "
          },
          {
            "embeddings": [
              {
                "data": "\u003d\u003d",
                "mime_type": "image/png",
                "name": "Verify Search Results have more than 3 items in the list"
              }
            ],
            "result": {
              "duration": 189795700,
              "status": "passed"
            },
            "line": 20,
            "name": "Take a screenshot",
            "match": {
              "location": "com.cloudmore.testSteps.CommonSteps.userTakeScreenshot()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 167995900,
              "status": "passed"
            },
            "line": 21,
            "name": "Validate search results have less than 3 items",
            "match": {
              "arguments": [
                {
                  "val": "3",
                  "offset": 39
                }
              ],
              "location": "com.cloudmore.testSteps.ui.SearchPageTestSteps.verify_results_set(int)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@ui"
          },
          {
            "name": "@QuestionTwo"
          },
          {
            "name": "@assignment"
          }
        ]
      },
      {
        "start_timestamp": "2023-02-20T09:41:39.089Z",
        "before": [
          {
            "result": {
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.beforeScenario(io.cucumber.java.Scenario)"
            }
          }
        ],
        "line": 26,
        "name": "Verify Search Results have more than 3 items in the list",
        "description": "",
        "id": "test-search-page-page-for-mobile-and-desktop-size-screens-with-number-of-items-in-the-list;verify-search-results-have-more-than-3-items-in-the-list;;3",
        "after": [
          {
            "result": {
              "duration": 999400,
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.afterScenario()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 647169800,
              "status": "passed"
            },
            "line": 9,
            "name": "User direct to the Home Page",
            "match": {
              "location": "com.cloudmore.testSteps.ui.HomePageTestSteps.userDirectToTheHomePage()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 223598400,
              "status": "passed"
            },
            "line": 10,
            "name": "Verify the HomePage availability",
            "match": {
              "location": "com.cloudmore.testSteps.ui.HomePageTestSteps.verifying_home_page_is_available()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2090612800,
              "status": "passed"
            },
            "line": 11,
            "name": "User Accepts the Cookie Consent",
            "match": {
              "location": "com.cloudmore.testSteps.ui.HomePageTestSteps.acceptTheCookies()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 162439500,
              "status": "passed"
            },
            "line": 12,
            "name": "Navigate to \"Search\" page from home Page",
            "match": {
              "arguments": [
                {
                  "val": "\"Search\"",
                  "offset": 12
                }
              ],
              "location": "com.cloudmore.testSteps.ui.HomePageTestSteps.navigateToTheURL(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 49221000,
              "status": "passed"
            },
            "line": 13,
            "name": "Verify the Search Page availability",
            "match": {
              "location": "com.cloudmore.testSteps.ui.SearchPageTestSteps.verifying_home_page_is_available()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 176869000,
              "status": "passed"
            },
            "line": 14,
            "name": "User set the Web Page resolution into \"MOBILE\" size",
            "match": {
              "arguments": [
                {
                  "val": "\"MOBILE\"",
                  "offset": 38
                }
              ],
              "location": "com.cloudmore.testSteps.CommonSteps.userSetWindwSize(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 201562600,
              "status": "passed"
            },
            "line": 15,
            "name": "User entered \"Azure\" as search keyword on the search text field",
            "match": {
              "arguments": [
                {
                  "val": "\"Azure\"",
                  "offset": 13
                }
              ],
              "location": "com.cloudmore.testSteps.ui.SearchPageTestSteps.user_entered_on_search_text_field(java.lang.String)"
            },
            "keyword": "When "
          },
          {
            "result": {
              "duration": 1930932800,
              "status": "passed"
            },
            "line": 16,
            "name": "User click the search button",
            "match": {
              "location": "com.cloudmore.testSteps.ui.SearchPageTestSteps.click_the_search_button()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 99143100,
              "status": "passed"
            },
            "line": 17,
            "name": "Verify that the search results page is available",
            "match": {
              "location": "com.cloudmore.testSteps.ui.SearchPageTestSteps.verify_searchResults_page_loaded()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 9005800,
              "status": "passed"
            },
            "line": 18,
            "name": "Verifying the Search Page URL After searching \"Azure\"",
            "match": {
              "arguments": [
                {
                  "val": "\"Azure\"",
                  "offset": 46
                }
              ],
              "location": "com.cloudmore.testSteps.ui.SearchPageTestSteps.verify_search_page_URL(java.lang.String)"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 9027800,
              "status": "passed"
            },
            "line": 19,
            "name": "Verifying the Search Page Title After searching \"Azure\"",
            "match": {
              "arguments": [
                {
                  "val": "\"Azure\"",
                  "offset": 48
                }
              ],
              "location": "com.cloudmore.testSteps.ui.SearchPageTestSteps.verify_search_page_title(java.lang.String)"
            },
            "keyword": "And "
          },
          {
            "embeddings": [
              {
                "data": "\u003d",
                "mime_type": "image/png",
                "name": "Verify Search Results have more than 3 items in the list"
              }
            ],
            "result": {
              "duration": 153914200,
              "status": "passed"
            },
            "line": 20,
            "name": "Take a screenshot",
            "match": {
              "location": "com.cloudmore.testSteps.CommonSteps.userTakeScreenshot()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 184335200,
              "status": "passed"
            },
            "line": 21,
            "name": "Validate search results have less than 3 items",
            "match": {
              "arguments": [
                {
                  "val": "3",
                  "offset": 39
                }
              ],
              "location": "com.cloudmore.testSteps.ui.SearchPageTestSteps.verify_results_set(int)"
            },
            "keyword": "Then "
          }
        ],
        "tags": [
          {
            "name": "@ui"
          },
          {
            "name": "@QuestionTwo"
          },
          {
            "name": "@assignment"
          }
        ]
      }
    ],
    "name": "Test Search Page page for mobile and desktop size screens with number of items in the list",
    "description": "",
    "id": "test-search-page-page-for-mobile-and-desktop-size-screens-with-number-of-items-in-the-list",
    "keyword": "Feature",
    "uri": "file:src/test/resources/featureFiles/Search.feature",
    "tags": [
      {
        "name": "@ui",
        "type": "Tag",
        "location": {
          "line": 5,
          "column": 1
        }
      },
      {
        "name": "@QuestionTwo",
        "type": "Tag",
        "location": {
          "line": 5,
          "column": 5
        }
      },
      {
        "name": "@assignment",
        "type": "Tag",
        "location": {
          "line": 5,
          "column": 18
        }
      }
    ]
  },
  {
    "line": 5,
    "elements": [
      {
        "start_timestamp": "2023-02-20T09:41:45.229Z",
        "before": [
          {
            "result": {
              "duration": 1245173800,
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.beforeScenario(io.cucumber.java.Scenario)"
            }
          }
        ],
        "line": 15,
        "name": "Verifying the CREATE USER API postUser_valid_BodyDefined_Is_Yes",
        "description": "",
        "id": "verify-the-create---update--get--delete-apis-of-user-service;verifying-the-create-user-api-\u003ctest-scenario-name\u003e;;2",
        "after": [
          {
            "result": {
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.afterScenario()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 5689128500,
              "status": "passed"
            },
            "line": 9,
            "name": "User Invoke the \"CREATE\" User API service to execute the \"postUser_valid_BodyDefined_Is_Yes\" test scenario",
            "match": {
              "arguments": [
                {
                  "val": "\"CREATE\"",
                  "offset": 16
                },
                {
                  "val": "\"postUser_valid_BodyDefined_Is_Yes\"",
                  "offset": 57
                }
              ],
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.get_user_api_service_called(java.lang.String,java.lang.String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1004600,
              "status": "passed"
            },
            "line": 10,
            "name": "Validate the Response Status Code",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseStatusCode()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 245812000,
              "status": "passed"
            },
            "line": 11,
            "name": "Validate the response json schema",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validate_json_schema()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2009000,
              "status": "passed"
            },
            "line": 12,
            "name": "Validate the Response Body",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseBody()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@API"
          },
          {
            "name": "@QuestionThree"
          },
          {
            "name": "@assignment"
          },
          {
            "name": "@createUserAPI"
          }
        ]
      },
      {
        "start_timestamp": "2023-02-20T09:41:52.491Z",
        "before": [
          {
            "result": {
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.beforeScenario(io.cucumber.java.Scenario)"
            }
          }
        ],
        "line": 16,
        "name": "Verifying the CREATE USER API postUser_BodyDefined_Is_No",
        "description": "",
        "id": "verify-the-create---update--get--delete-apis-of-user-service;verifying-the-create-user-api-\u003ctest-scenario-name\u003e;;3",
        "after": [
          {
            "result": {
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.afterScenario()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1520004300,
              "status": "passed"
            },
            "line": 9,
            "name": "User Invoke the \"CREATE\" User API service to execute the \"postUser_BodyDefined_Is_No\" test scenario",
            "match": {
              "arguments": [
                {
                  "val": "\"CREATE\"",
                  "offset": 16
                },
                {
                  "val": "\"postUser_BodyDefined_Is_No\"",
                  "offset": 57
                }
              ],
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.get_user_api_service_called(java.lang.String,java.lang.String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "error_message": "java.lang.AssertionError: Expected status code is not match with actual status code expected [400] but found [405]\r\n\tat com.cloudmore.listener.DryRunPlugin.stepFinished(DryRunPlugin.java:120)\r\n\tat io.cucumber.core.eventbus.AbstractEventPublisher.send(AbstractEventPublisher.java:51)\r\n\tat io.cucumber.core.eventbus.AbstractEventBus.send(AbstractEventBus.java:12)\r\n\tat io.cucumber.core.runtime.SynchronizedEventBus.send(SynchronizedEventBus.java:47)\r\n\tat io.cucumber.core.runtime.ThreadLocalRunnerSupplier$LocalEventBus.send(ThreadLocalRunnerSupplier.java:66)\r\n\tat io.cucumber.core.runner.TestStep.emitTestStepFinished(TestStep.java:124)\r\n\tat io.cucumber.core.runner.TestStep.run(TestStep.java:74)\r\n\tat io.cucumber.core.runner.PickleStepTestStep.run(PickleStepTestStep.java:51)\r\n\tat io.cucumber.core.runner.TestCase.run(TestCase.java:104)\r\n\tat io.cucumber.core.runner.Runner.runPickle(Runner.java:73)\r\n\tat io.cucumber.testng.TestNGCucumberRunner.lambda$runScenario$0(TestNGCucumberRunner.java:117)\r\n\tat io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:117)\r\n\tat io.cucumber.testng.TestNGCucumberRunner.runScenario(TestNGCucumberRunner.java:114)\r\n\tat io.cucumber.testng.AbstractTestNGCucumberTests.runScenario(AbstractTestNGCucumberTests.java:31)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)\r\n\tat org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)\r\n\tat org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)\r\n\tat org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)\r\n\tat org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)\r\n\tat org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:794)\r\n\tat org.testng.TestRunner.run(TestRunner.java:596)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:377)\r\n\tat org.testng.SuiteRunner.access$000(SuiteRunner.java:28)\r\n\tat org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)\r\n\tat org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)\r\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\r\n\tat java.base/java.lang.Thread.run(Thread.java:834)\r\n",
              "duration": 5002800,
              "status": "failed"
            },
            "line": 10,
            "name": "Validate the Response Status Code",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseStatusCode()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 11,
            "name": "Validate the response json schema",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validate_json_schema()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 12,
            "name": "Validate the Response Body",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseBody()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@API"
          },
          {
            "name": "@QuestionThree"
          },
          {
            "name": "@assignment"
          },
          {
            "name": "@createUserAPI"
          }
        ]
      },
      {
        "start_timestamp": "2023-02-20T09:41:54.046Z",
        "before": [
          {
            "result": {
              "duration": 272900,
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.beforeScenario(io.cucumber.java.Scenario)"
            }
          }
        ],
        "line": 16,
        "name": "Verifying the CREATE USER API postUser_BodyDefined_Is_No",
        "description": "",
        "id": "verify-the-create---update--get--delete-apis-of-user-service;verifying-the-create-user-api-\u003ctest-scenario-name\u003e;;3",
        "after": [
          {
            "result": {
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.afterScenario()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1606554000,
              "status": "passed"
            },
            "line": 9,
            "name": "User Invoke the \"CREATE\" User API service to execute the \"postUser_BodyDefined_Is_No\" test scenario",
            "match": {
              "arguments": [
                {
                  "val": "\"CREATE\"",
                  "offset": 16
                },
                {
                  "val": "\"postUser_BodyDefined_Is_No\"",
                  "offset": 57
                }
              ],
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.get_user_api_service_called(java.lang.String,java.lang.String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "error_message": "java.lang.AssertionError: Expected status code is not match with actual status code expected [400] but found [405]\r\n\tat com.cloudmore.listener.DryRunPlugin.stepFinished(DryRunPlugin.java:120)\r\n\tat io.cucumber.core.eventbus.AbstractEventPublisher.send(AbstractEventPublisher.java:51)\r\n\tat io.cucumber.core.eventbus.AbstractEventBus.send(AbstractEventBus.java:12)\r\n\tat io.cucumber.core.runtime.SynchronizedEventBus.send(SynchronizedEventBus.java:47)\r\n\tat io.cucumber.core.runtime.ThreadLocalRunnerSupplier$LocalEventBus.send(ThreadLocalRunnerSupplier.java:66)\r\n\tat io.cucumber.core.runner.TestStep.emitTestStepFinished(TestStep.java:124)\r\n\tat io.cucumber.core.runner.TestStep.run(TestStep.java:74)\r\n\tat io.cucumber.core.runner.PickleStepTestStep.run(PickleStepTestStep.java:51)\r\n\tat io.cucumber.core.runner.TestCase.run(TestCase.java:104)\r\n\tat io.cucumber.core.runner.Runner.runPickle(Runner.java:73)\r\n\tat io.cucumber.testng.TestNGCucumberRunner.lambda$runScenario$0(TestNGCucumberRunner.java:117)\r\n\tat io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:117)\r\n\tat io.cucumber.testng.TestNGCucumberRunner.runScenario(TestNGCucumberRunner.java:114)\r\n\tat io.cucumber.testng.AbstractTestNGCucumberTests.runScenario(AbstractTestNGCucumberTests.java:31)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)\r\n\tat org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)\r\n\tat org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)\r\n\tat org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)\r\n\tat org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)\r\n\tat org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:794)\r\n\tat org.testng.TestRunner.run(TestRunner.java:596)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:377)\r\n\tat org.testng.SuiteRunner.access$000(SuiteRunner.java:28)\r\n\tat org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)\r\n\tat org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)\r\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\r\n\tat java.base/java.lang.Thread.run(Thread.java:834)\r\n",
              "duration": 1544400,
              "status": "failed"
            },
            "line": 10,
            "name": "Validate the Response Status Code",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseStatusCode()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 875500,
              "status": "skipped"
            },
            "line": 11,
            "name": "Validate the response json schema",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validate_json_schema()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 780800,
              "status": "skipped"
            },
            "line": 12,
            "name": "Validate the Response Body",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseBody()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@API"
          },
          {
            "name": "@QuestionThree"
          },
          {
            "name": "@assignment"
          },
          {
            "name": "@createUserAPI"
          }
        ]
      },
      {
        "start_timestamp": "2023-02-20T09:41:55.697Z",
        "before": [
          {
            "result": {
              "duration": 998800,
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.beforeScenario(io.cucumber.java.Scenario)"
            }
          }
        ],
        "line": 17,
        "name": "Verifying the CREATE USER API postUser_BodyApplicationJsonType_Is_NotObject",
        "description": "",
        "id": "verify-the-create---update--get--delete-apis-of-user-service;verifying-the-create-user-api-\u003ctest-scenario-name\u003e;;4",
        "after": [
          {
            "result": {
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.afterScenario()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1493353500,
              "status": "passed"
            },
            "line": 9,
            "name": "User Invoke the \"CREATE\" User API service to execute the \"postUser_BodyApplicationJsonType_Is_NotObject\" test scenario",
            "match": {
              "arguments": [
                {
                  "val": "\"CREATE\"",
                  "offset": 16
                },
                {
                  "val": "\"postUser_BodyApplicationJsonType_Is_NotObject\"",
                  "offset": 57
                }
              ],
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.get_user_api_service_called(java.lang.String,java.lang.String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 3996200,
              "status": "passed"
            },
            "line": 10,
            "name": "Validate the Response Status Code",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseStatusCode()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 6188900,
              "status": "passed"
            },
            "line": 11,
            "name": "Validate the response json schema",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validate_json_schema()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "passed"
            },
            "line": 12,
            "name": "Validate the Response Body",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseBody()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@API"
          },
          {
            "name": "@QuestionThree"
          },
          {
            "name": "@assignment"
          },
          {
            "name": "@createUserAPI"
          }
        ]
      },
      {
        "start_timestamp": "2023-02-20T09:41:57.293Z",
        "before": [
          {
            "result": {
              "duration": 891900,
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.beforeScenario(io.cucumber.java.Scenario)"
            }
          }
        ],
        "line": 18,
        "name": "Verifying the CREATE USER API postUser_BodyApplicationJsonValueProperties_Are_Null",
        "description": "",
        "id": "verify-the-create---update--get--delete-apis-of-user-service;verifying-the-create-user-api-\u003ctest-scenario-name\u003e;;5",
        "after": [
          {
            "result": {
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.afterScenario()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1632911700,
              "status": "passed"
            },
            "line": 9,
            "name": "User Invoke the \"CREATE\" User API service to execute the \"postUser_BodyApplicationJsonValueProperties_Are_Null\" test scenario",
            "match": {
              "arguments": [
                {
                  "val": "\"CREATE\"",
                  "offset": 16
                },
                {
                  "val": "\"postUser_BodyApplicationJsonValueProperties_Are_Null\"",
                  "offset": 57
                }
              ],
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.get_user_api_service_called(java.lang.String,java.lang.String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "error_message": "java.lang.AssertionError: Expected status code is not match with actual status code expected [400] but found [200]\r\n\tat com.cloudmore.listener.DryRunPlugin.stepFinished(DryRunPlugin.java:120)\r\n\tat io.cucumber.core.eventbus.AbstractEventPublisher.send(AbstractEventPublisher.java:51)\r\n\tat io.cucumber.core.eventbus.AbstractEventBus.send(AbstractEventBus.java:12)\r\n\tat io.cucumber.core.runtime.SynchronizedEventBus.send(SynchronizedEventBus.java:47)\r\n\tat io.cucumber.core.runtime.ThreadLocalRunnerSupplier$LocalEventBus.send(ThreadLocalRunnerSupplier.java:66)\r\n\tat io.cucumber.core.runner.TestStep.emitTestStepFinished(TestStep.java:124)\r\n\tat io.cucumber.core.runner.TestStep.run(TestStep.java:74)\r\n\tat io.cucumber.core.runner.PickleStepTestStep.run(PickleStepTestStep.java:51)\r\n\tat io.cucumber.core.runner.TestCase.run(TestCase.java:104)\r\n\tat io.cucumber.core.runner.Runner.runPickle(Runner.java:73)\r\n\tat io.cucumber.testng.TestNGCucumberRunner.lambda$runScenario$0(TestNGCucumberRunner.java:117)\r\n\tat io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:117)\r\n\tat io.cucumber.testng.TestNGCucumberRunner.runScenario(TestNGCucumberRunner.java:114)\r\n\tat io.cucumber.testng.AbstractTestNGCucumberTests.runScenario(AbstractTestNGCucumberTests.java:31)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)\r\n\tat org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)\r\n\tat org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)\r\n\tat org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)\r\n\tat org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)\r\n\tat org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:794)\r\n\tat org.testng.TestRunner.run(TestRunner.java:596)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:377)\r\n\tat org.testng.SuiteRunner.access$000(SuiteRunner.java:28)\r\n\tat org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)\r\n\tat org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)\r\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\r\n\tat java.base/java.lang.Thread.run(Thread.java:834)\r\n",
              "duration": 1245400,
              "status": "failed"
            },
            "line": 10,
            "name": "Validate the Response Status Code",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseStatusCode()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 804700,
              "status": "skipped"
            },
            "line": 11,
            "name": "Validate the response json schema",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validate_json_schema()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 549700,
              "status": "skipped"
            },
            "line": 12,
            "name": "Validate the Response Body",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseBody()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@API"
          },
          {
            "name": "@QuestionThree"
          },
          {
            "name": "@assignment"
          },
          {
            "name": "@createUserAPI"
          }
        ]
      },
      {
        "start_timestamp": "2023-02-20T09:41:58.957Z",
        "before": [
          {
            "result": {
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.beforeScenario(io.cucumber.java.Scenario)"
            }
          }
        ],
        "line": 18,
        "name": "Verifying the CREATE USER API postUser_BodyApplicationJsonValueProperties_Are_Null",
        "description": "",
        "id": "verify-the-create---update--get--delete-apis-of-user-service;verifying-the-create-user-api-\u003ctest-scenario-name\u003e;;5",
        "after": [
          {
            "result": {
              "duration": 998300,
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.afterScenario()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1630476000,
              "status": "passed"
            },
            "line": 9,
            "name": "User Invoke the \"CREATE\" User API service to execute the \"postUser_BodyApplicationJsonValueProperties_Are_Null\" test scenario",
            "match": {
              "arguments": [
                {
                  "val": "\"CREATE\"",
                  "offset": 16
                },
                {
                  "val": "\"postUser_BodyApplicationJsonValueProperties_Are_Null\"",
                  "offset": 57
                }
              ],
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.get_user_api_service_called(java.lang.String,java.lang.String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "error_message": "java.lang.AssertionError: Expected status code is not match with actual status code expected [400] but found [200]\r\n\tat com.cloudmore.listener.DryRunPlugin.stepFinished(DryRunPlugin.java:120)\r\n\tat io.cucumber.core.eventbus.AbstractEventPublisher.send(AbstractEventPublisher.java:51)\r\n\tat io.cucumber.core.eventbus.AbstractEventBus.send(AbstractEventBus.java:12)\r\n\tat io.cucumber.core.runtime.SynchronizedEventBus.send(SynchronizedEventBus.java:47)\r\n\tat io.cucumber.core.runtime.ThreadLocalRunnerSupplier$LocalEventBus.send(ThreadLocalRunnerSupplier.java:66)\r\n\tat io.cucumber.core.runner.TestStep.emitTestStepFinished(TestStep.java:124)\r\n\tat io.cucumber.core.runner.TestStep.run(TestStep.java:74)\r\n\tat io.cucumber.core.runner.PickleStepTestStep.run(PickleStepTestStep.java:51)\r\n\tat io.cucumber.core.runner.TestCase.run(TestCase.java:104)\r\n\tat io.cucumber.core.runner.Runner.runPickle(Runner.java:73)\r\n\tat io.cucumber.testng.TestNGCucumberRunner.lambda$runScenario$0(TestNGCucumberRunner.java:117)\r\n\tat io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:117)\r\n\tat io.cucumber.testng.TestNGCucumberRunner.runScenario(TestNGCucumberRunner.java:114)\r\n\tat io.cucumber.testng.AbstractTestNGCucumberTests.runScenario(AbstractTestNGCucumberTests.java:31)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)\r\n\tat org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)\r\n\tat org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)\r\n\tat org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)\r\n\tat org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)\r\n\tat org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:794)\r\n\tat org.testng.TestRunner.run(TestRunner.java:596)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:377)\r\n\tat org.testng.SuiteRunner.access$000(SuiteRunner.java:28)\r\n\tat org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)\r\n\tat org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)\r\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\r\n\tat java.base/java.lang.Thread.run(Thread.java:834)\r\n",
              "duration": 1997000,
              "status": "failed"
            },
            "line": 10,
            "name": "Validate the Response Status Code",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseStatusCode()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 997500,
              "status": "skipped"
            },
            "line": 11,
            "name": "Validate the response json schema",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validate_json_schema()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 505200,
              "status": "skipped"
            },
            "line": 12,
            "name": "Validate the Response Body",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseBody()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@API"
          },
          {
            "name": "@QuestionThree"
          },
          {
            "name": "@assignment"
          },
          {
            "name": "@createUserAPI"
          }
        ]
      },
      {
        "start_timestamp": "2023-02-20T09:42:00.630Z",
        "before": [
          {
            "result": {
              "duration": 999300,
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.beforeScenario(io.cucumber.java.Scenario)"
            }
          }
        ],
        "line": 28,
        "name": "Verifying the GET USER API getUser_valid_usernameDefined_Is_Yes",
        "description": "",
        "id": "verify-the-create---update--get--delete-apis-of-user-service;verifying-the-get-user-api-\u003ctest-scenario-name\u003e;;2",
        "after": [
          {
            "result": {
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.afterScenario()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1680795400,
              "status": "passed"
            },
            "line": 22,
            "name": "User Invoke the \"GET\" User API service to execute the \"getUser_valid_usernameDefined_Is_Yes\" test scenario",
            "match": {
              "arguments": [
                {
                  "val": "\"GET\"",
                  "offset": 16
                },
                {
                  "val": "\"getUser_valid_usernameDefined_Is_Yes\"",
                  "offset": 54
                }
              ],
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.get_user_api_service_called(java.lang.String,java.lang.String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1235900,
              "status": "passed"
            },
            "line": 23,
            "name": "Validate the Response Status Code",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseStatusCode()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 21020200,
              "status": "passed"
            },
            "line": 24,
            "name": "Validate the response json schema",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validate_json_schema()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "error_message": "java.lang.AssertionError: Expected Response is not match with actual Response body expected [{\n  \"id\": 122,\n  \"username\": \"AkilaTEST\",\n  \"firstName\": \"Dhanushaka\",\n  \"lastName\": \"Samaranayake\",\n  \"email\": \"akila@email.com\",\n  \"password\": \"testPassword\",\n  \"phone\": \"+94717147499\",\n  \"userStatus\": 1\n}] but found [{\n    \"id\": 122,\n    \"username\": \"AkilaTEST\",\n    \"firstName\": \"Dhanushaka\",\n    \"lastName\": \"Samaranayake\",\n    \"email\": \"akila@email.com\",\n    \"password\": \"testPassword\",\n    \"phone\": \"+94717147499\",\n    \"userStatus\": 1\n}]\r\n\tat com.cloudmore.listener.DryRunPlugin.stepFinished(DryRunPlugin.java:120)\r\n\tat io.cucumber.core.eventbus.AbstractEventPublisher.send(AbstractEventPublisher.java:51)\r\n\tat io.cucumber.core.eventbus.AbstractEventBus.send(AbstractEventBus.java:12)\r\n\tat io.cucumber.core.runtime.SynchronizedEventBus.send(SynchronizedEventBus.java:47)\r\n\tat io.cucumber.core.runtime.ThreadLocalRunnerSupplier$LocalEventBus.send(ThreadLocalRunnerSupplier.java:66)\r\n\tat io.cucumber.core.runner.TestStep.emitTestStepFinished(TestStep.java:124)\r\n\tat io.cucumber.core.runner.TestStep.run(TestStep.java:74)\r\n\tat io.cucumber.core.runner.PickleStepTestStep.run(PickleStepTestStep.java:51)\r\n\tat io.cucumber.core.runner.TestCase.run(TestCase.java:104)\r\n\tat io.cucumber.core.runner.Runner.runPickle(Runner.java:73)\r\n\tat io.cucumber.testng.TestNGCucumberRunner.lambda$runScenario$0(TestNGCucumberRunner.java:117)\r\n\tat io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:117)\r\n\tat io.cucumber.testng.TestNGCucumberRunner.runScenario(TestNGCucumberRunner.java:114)\r\n\tat io.cucumber.testng.AbstractTestNGCucumberTests.runScenario(AbstractTestNGCucumberTests.java:31)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)\r\n\tat org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)\r\n\tat org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)\r\n\tat org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)\r\n\tat org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)\r\n\tat org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:794)\r\n\tat org.testng.TestRunner.run(TestRunner.java:596)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:377)\r\n\tat org.testng.SuiteRunner.access$000(SuiteRunner.java:28)\r\n\tat org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)\r\n\tat org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)\r\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\r\n\tat java.base/java.lang.Thread.run(Thread.java:834)\r\n",
              "duration": 1768100,
              "status": "failed"
            },
            "line": 25,
            "name": "Validate the Response Body",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseBody()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@API"
          },
          {
            "name": "@QuestionThree"
          },
          {
            "name": "@assignment"
          },
          {
            "name": "@getUserAPI"
          }
        ]
      },
      {
        "start_timestamp": "2023-02-20T09:42:02.364Z",
        "before": [
          {
            "result": {
              "duration": 1994600,
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.beforeScenario(io.cucumber.java.Scenario)"
            }
          }
        ],
        "line": 28,
        "name": "Verifying the GET USER API getUser_valid_usernameDefined_Is_Yes",
        "description": "",
        "id": "verify-the-create---update--get--delete-apis-of-user-service;verifying-the-get-user-api-\u003ctest-scenario-name\u003e;;2",
        "after": [
          {
            "result": {
              "duration": 1002200,
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.afterScenario()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1685568700,
              "status": "passed"
            },
            "line": 22,
            "name": "User Invoke the \"GET\" User API service to execute the \"getUser_valid_usernameDefined_Is_Yes\" test scenario",
            "match": {
              "arguments": [
                {
                  "val": "\"GET\"",
                  "offset": 16
                },
                {
                  "val": "\"getUser_valid_usernameDefined_Is_Yes\"",
                  "offset": 54
                }
              ],
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.get_user_api_service_called(java.lang.String,java.lang.String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1208500,
              "status": "passed"
            },
            "line": 23,
            "name": "Validate the Response Status Code",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseStatusCode()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 19981200,
              "status": "passed"
            },
            "line": 24,
            "name": "Validate the response json schema",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validate_json_schema()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "error_message": "java.lang.AssertionError: Expected Response is not match with actual Response body expected [{\n  \"id\": 122,\n  \"username\": \"AkilaTEST\",\n  \"firstName\": \"Dhanushaka\",\n  \"lastName\": \"Samaranayake\",\n  \"email\": \"akila@email.com\",\n  \"password\": \"testPassword\",\n  \"phone\": \"+94717147499\",\n  \"userStatus\": 1\n}] but found [{\n    \"id\": 122,\n    \"username\": \"AkilaTEST\",\n    \"firstName\": \"Dhanushaka\",\n    \"lastName\": \"Samaranayake\",\n    \"email\": \"akila@email.com\",\n    \"password\": \"testPassword\",\n    \"phone\": \"+94717147499\",\n    \"userStatus\": 1\n}]\r\n\tat com.cloudmore.listener.DryRunPlugin.stepFinished(DryRunPlugin.java:120)\r\n\tat io.cucumber.core.eventbus.AbstractEventPublisher.send(AbstractEventPublisher.java:51)\r\n\tat io.cucumber.core.eventbus.AbstractEventBus.send(AbstractEventBus.java:12)\r\n\tat io.cucumber.core.runtime.SynchronizedEventBus.send(SynchronizedEventBus.java:47)\r\n\tat io.cucumber.core.runtime.ThreadLocalRunnerSupplier$LocalEventBus.send(ThreadLocalRunnerSupplier.java:66)\r\n\tat io.cucumber.core.runner.TestStep.emitTestStepFinished(TestStep.java:124)\r\n\tat io.cucumber.core.runner.TestStep.run(TestStep.java:74)\r\n\tat io.cucumber.core.runner.PickleStepTestStep.run(PickleStepTestStep.java:51)\r\n\tat io.cucumber.core.runner.TestCase.run(TestCase.java:104)\r\n\tat io.cucumber.core.runner.Runner.runPickle(Runner.java:73)\r\n\tat io.cucumber.testng.TestNGCucumberRunner.lambda$runScenario$0(TestNGCucumberRunner.java:117)\r\n\tat io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:117)\r\n\tat io.cucumber.testng.TestNGCucumberRunner.runScenario(TestNGCucumberRunner.java:114)\r\n\tat io.cucumber.testng.AbstractTestNGCucumberTests.runScenario(AbstractTestNGCucumberTests.java:31)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)\r\n\tat org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)\r\n\tat org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)\r\n\tat org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)\r\n\tat org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)\r\n\tat org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:794)\r\n\tat org.testng.TestRunner.run(TestRunner.java:596)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:377)\r\n\tat org.testng.SuiteRunner.access$000(SuiteRunner.java:28)\r\n\tat org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)\r\n\tat org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)\r\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\r\n\tat java.base/java.lang.Thread.run(Thread.java:834)\r\n",
              "duration": 1995100,
              "status": "failed"
            },
            "line": 25,
            "name": "Validate the Response Body",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseBody()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@API"
          },
          {
            "name": "@QuestionThree"
          },
          {
            "name": "@assignment"
          },
          {
            "name": "@getUserAPI"
          }
        ]
      },
      {
        "start_timestamp": "2023-02-20T09:42:04.106Z",
        "before": [
          {
            "result": {
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.beforeScenario(io.cucumber.java.Scenario)"
            }
          }
        ],
        "line": 29,
        "name": "Verifying the GET USER API getUser_invalid_usernameDefined_Is_Yes",
        "description": "",
        "id": "verify-the-create---update--get--delete-apis-of-user-service;verifying-the-get-user-api-\u003ctest-scenario-name\u003e;;3",
        "after": [
          {
            "result": {
              "duration": 817600,
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.afterScenario()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1577649500,
              "status": "passed"
            },
            "line": 22,
            "name": "User Invoke the \"GET\" User API service to execute the \"getUser_invalid_usernameDefined_Is_Yes\" test scenario",
            "match": {
              "arguments": [
                {
                  "val": "\"GET\"",
                  "offset": 16
                },
                {
                  "val": "\"getUser_invalid_usernameDefined_Is_Yes\"",
                  "offset": 54
                }
              ],
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.get_user_api_service_called(java.lang.String,java.lang.String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "passed"
            },
            "line": 23,
            "name": "Validate the Response Status Code",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseStatusCode()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 9999900,
              "status": "passed"
            },
            "line": 24,
            "name": "Validate the response json schema",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validate_json_schema()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2080900,
              "status": "passed"
            },
            "line": 25,
            "name": "Validate the Response Body",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseBody()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@API"
          },
          {
            "name": "@QuestionThree"
          },
          {
            "name": "@assignment"
          },
          {
            "name": "@getUserAPI"
          }
        ]
      },
      {
        "start_timestamp": "2023-02-20T09:42:05.720Z",
        "before": [
          {
            "result": {
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.beforeScenario(io.cucumber.java.Scenario)"
            }
          }
        ],
        "line": 30,
        "name": "Verifying the GET USER API getUser_username_Is_Null",
        "description": "",
        "id": "verify-the-create---update--get--delete-apis-of-user-service;verifying-the-get-user-api-\u003ctest-scenario-name\u003e;;4",
        "after": [
          {
            "result": {
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.afterScenario()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1474108700,
              "status": "passed"
            },
            "line": 22,
            "name": "User Invoke the \"GET\" User API service to execute the \"getUser_username_Is_Null\" test scenario",
            "match": {
              "arguments": [
                {
                  "val": "\"GET\"",
                  "offset": 16
                },
                {
                  "val": "\"getUser_username_Is_Null\"",
                  "offset": 54
                }
              ],
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.get_user_api_service_called(java.lang.String,java.lang.String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 887600,
              "status": "passed"
            },
            "line": 23,
            "name": "Validate the Response Status Code",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseStatusCode()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "error_message": "java.lang.AssertionError: 1 expectation failed.\nResponse body doesn\u0027t match expectation.\nExpected: The content to match the given JSON schema.\nerror: object has missing required properties ([\"message\"])\n    level: \"error\"\n    schema: {\"loadingURI\":\"#\",\"pointer\":\"\"}\n    instance: {\"pointer\":\"\"}\n    domain: \"validation\"\n    keyword: \"required\"\n    required: [\"code\",\"message\",\"type\"]\n    missing: [\"message\"]\n\n  Actual: {\"code\":405,\"type\":\"unknown\"}\n\r\n\tat com.cloudmore.listener.DryRunPlugin.stepFinished(DryRunPlugin.java:120)\r\n\tat io.cucumber.core.eventbus.AbstractEventPublisher.send(AbstractEventPublisher.java:51)\r\n\tat io.cucumber.core.eventbus.AbstractEventBus.send(AbstractEventBus.java:12)\r\n\tat io.cucumber.core.runtime.SynchronizedEventBus.send(SynchronizedEventBus.java:47)\r\n\tat io.cucumber.core.runtime.ThreadLocalRunnerSupplier$LocalEventBus.send(ThreadLocalRunnerSupplier.java:66)\r\n\tat io.cucumber.core.runner.TestStep.emitTestStepFinished(TestStep.java:124)\r\n\tat io.cucumber.core.runner.TestStep.run(TestStep.java:74)\r\n\tat io.cucumber.core.runner.PickleStepTestStep.run(PickleStepTestStep.java:51)\r\n\tat io.cucumber.core.runner.TestCase.run(TestCase.java:104)\r\n\tat io.cucumber.core.runner.Runner.runPickle(Runner.java:73)\r\n\tat io.cucumber.testng.TestNGCucumberRunner.lambda$runScenario$0(TestNGCucumberRunner.java:117)\r\n\tat io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:117)\r\n\tat io.cucumber.testng.TestNGCucumberRunner.runScenario(TestNGCucumberRunner.java:114)\r\n\tat io.cucumber.testng.AbstractTestNGCucumberTests.runScenario(AbstractTestNGCucumberTests.java:31)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor149.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)\r\n\tat org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)\r\n\tat org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)\r\n\tat org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)\r\n\tat org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)\r\n\tat org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:794)\r\n\tat org.testng.TestRunner.run(TestRunner.java:596)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:377)\r\n\tat org.testng.SuiteRunner.access$000(SuiteRunner.java:28)\r\n\tat org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)\r\n\tat org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)\r\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\r\n\tat java.base/java.lang.Thread.run(Thread.java:834)\r\n",
              "duration": 56784800,
              "status": "failed"
            },
            "line": 24,
            "name": "Validate the response json schema",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validate_json_schema()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1005800,
              "status": "skipped"
            },
            "line": 25,
            "name": "Validate the Response Body",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseBody()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@API"
          },
          {
            "name": "@QuestionThree"
          },
          {
            "name": "@assignment"
          },
          {
            "name": "@getUserAPI"
          }
        ]
      },
      {
        "start_timestamp": "2023-02-20T09:42:07.290Z",
        "before": [
          {
            "result": {
              "duration": 960100,
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.beforeScenario(io.cucumber.java.Scenario)"
            }
          }
        ],
        "line": 30,
        "name": "Verifying the GET USER API getUser_username_Is_Null",
        "description": "",
        "id": "verify-the-create---update--get--delete-apis-of-user-service;verifying-the-get-user-api-\u003ctest-scenario-name\u003e;;4",
        "after": [
          {
            "result": {
              "duration": 625300,
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.afterScenario()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1568076300,
              "status": "passed"
            },
            "line": 22,
            "name": "User Invoke the \"GET\" User API service to execute the \"getUser_username_Is_Null\" test scenario",
            "match": {
              "arguments": [
                {
                  "val": "\"GET\"",
                  "offset": 16
                },
                {
                  "val": "\"getUser_username_Is_Null\"",
                  "offset": 54
                }
              ],
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.get_user_api_service_called(java.lang.String,java.lang.String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 2000000,
              "status": "passed"
            },
            "line": 23,
            "name": "Validate the Response Status Code",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseStatusCode()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "error_message": "java.lang.AssertionError: 1 expectation failed.\nResponse body doesn\u0027t match expectation.\nExpected: The content to match the given JSON schema.\nerror: object has missing required properties ([\"message\"])\n    level: \"error\"\n    schema: {\"loadingURI\":\"#\",\"pointer\":\"\"}\n    instance: {\"pointer\":\"\"}\n    domain: \"validation\"\n    keyword: \"required\"\n    required: [\"code\",\"message\",\"type\"]\n    missing: [\"message\"]\n\n  Actual: {\"code\":405,\"type\":\"unknown\"}\n\r\n\tat com.cloudmore.listener.DryRunPlugin.stepFinished(DryRunPlugin.java:120)\r\n\tat io.cucumber.core.eventbus.AbstractEventPublisher.send(AbstractEventPublisher.java:51)\r\n\tat io.cucumber.core.eventbus.AbstractEventBus.send(AbstractEventBus.java:12)\r\n\tat io.cucumber.core.runtime.SynchronizedEventBus.send(SynchronizedEventBus.java:47)\r\n\tat io.cucumber.core.runtime.ThreadLocalRunnerSupplier$LocalEventBus.send(ThreadLocalRunnerSupplier.java:66)\r\n\tat io.cucumber.core.runner.TestStep.emitTestStepFinished(TestStep.java:124)\r\n\tat io.cucumber.core.runner.TestStep.run(TestStep.java:74)\r\n\tat io.cucumber.core.runner.PickleStepTestStep.run(PickleStepTestStep.java:51)\r\n\tat io.cucumber.core.runner.TestCase.run(TestCase.java:104)\r\n\tat io.cucumber.core.runner.Runner.runPickle(Runner.java:73)\r\n\tat io.cucumber.testng.TestNGCucumberRunner.lambda$runScenario$0(TestNGCucumberRunner.java:117)\r\n\tat io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:117)\r\n\tat io.cucumber.testng.TestNGCucumberRunner.runScenario(TestNGCucumberRunner.java:114)\r\n\tat io.cucumber.testng.AbstractTestNGCucumberTests.runScenario(AbstractTestNGCucumberTests.java:31)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor149.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)\r\n\tat org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)\r\n\tat org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)\r\n\tat org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)\r\n\tat org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)\r\n\tat org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:794)\r\n\tat org.testng.TestRunner.run(TestRunner.java:596)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:377)\r\n\tat org.testng.SuiteRunner.access$000(SuiteRunner.java:28)\r\n\tat org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)\r\n\tat org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)\r\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\r\n\tat java.base/java.lang.Thread.run(Thread.java:834)\r\n",
              "duration": 12864900,
              "status": "failed"
            },
            "line": 24,
            "name": "Validate the response json schema",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validate_json_schema()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 428200,
              "status": "skipped"
            },
            "line": 25,
            "name": "Validate the Response Body",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseBody()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@API"
          },
          {
            "name": "@QuestionThree"
          },
          {
            "name": "@assignment"
          },
          {
            "name": "@getUserAPI"
          }
        ]
      },
      {
        "start_timestamp": "2023-02-20T09:42:08.909Z",
        "before": [
          {
            "result": {
              "duration": 757900,
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.beforeScenario(io.cucumber.java.Scenario)"
            }
          }
        ],
        "line": 31,
        "name": "Verifying the GET USER API getUser_invalid_usernameDefined_Is_Yes_with_special_characters",
        "description": "",
        "id": "verify-the-create---update--get--delete-apis-of-user-service;verifying-the-get-user-api-\u003ctest-scenario-name\u003e;;5",
        "after": [
          {
            "result": {
              "duration": 945900,
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.afterScenario()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1586213300,
              "status": "passed"
            },
            "line": 22,
            "name": "User Invoke the \"GET\" User API service to execute the \"getUser_invalid_usernameDefined_Is_Yes_with_special_characters\" test scenario",
            "match": {
              "arguments": [
                {
                  "val": "\"GET\"",
                  "offset": 16
                },
                {
                  "val": "\"getUser_invalid_usernameDefined_Is_Yes_with_special_characters\"",
                  "offset": 54
                }
              ],
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.get_user_api_service_called(java.lang.String,java.lang.String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 701500,
              "status": "passed"
            },
            "line": 23,
            "name": "Validate the Response Status Code",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseStatusCode()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 7122000,
              "status": "passed"
            },
            "line": 24,
            "name": "Validate the response json schema",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validate_json_schema()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1002300,
              "status": "passed"
            },
            "line": 25,
            "name": "Validate the Response Body",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseBody()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@API"
          },
          {
            "name": "@QuestionThree"
          },
          {
            "name": "@assignment"
          },
          {
            "name": "@getUserAPI"
          }
        ]
      },
      {
        "start_timestamp": "2023-02-20T09:42:10.570Z",
        "before": [
          {
            "result": {
              "duration": 1018200,
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.beforeScenario(io.cucumber.java.Scenario)"
            }
          }
        ],
        "line": 42,
        "name": "Verifying the UPDATE USER API putUser_valid_Username_validBodyDefined_Is_Yes",
        "description": "",
        "id": "verify-the-create---update--get--delete-apis-of-user-service;verifying-the-update-user-api-\u003ctest-scenario-name\u003e;;2",
        "after": [
          {
            "result": {
              "duration": 1007600,
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.afterScenario()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1562097200,
              "status": "passed"
            },
            "line": 36,
            "name": "User Invoke the \"UPDATE\" User API service to execute the \"putUser_valid_Username_validBodyDefined_Is_Yes\" test scenario",
            "match": {
              "arguments": [
                {
                  "val": "\"UPDATE\"",
                  "offset": 16
                },
                {
                  "val": "\"putUser_valid_Username_validBodyDefined_Is_Yes\"",
                  "offset": 57
                }
              ],
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.get_user_api_service_called(java.lang.String,java.lang.String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 792800,
              "status": "passed"
            },
            "line": 37,
            "name": "Validate the Response Status Code",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseStatusCode()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 13011100,
              "status": "passed"
            },
            "line": 38,
            "name": "Validate the response json schema",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validate_json_schema()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 999100,
              "status": "passed"
            },
            "line": 39,
            "name": "Validate the Response Body",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseBody()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@API"
          },
          {
            "name": "@QuestionThree"
          },
          {
            "name": "@assignment"
          },
          {
            "name": "@updateUserAPI"
          },
          {
            "name": "@API"
          }
        ]
      },
      {
        "start_timestamp": "2023-02-20T09:42:12.219Z",
        "before": [
          {
            "result": {
              "duration": 593700,
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.beforeScenario(io.cucumber.java.Scenario)"
            }
          }
        ],
        "line": 43,
        "name": "Verifying the UPDATE USER API putUser_invalid_Username_validBodyDefined_Is_Yes",
        "description": "",
        "id": "verify-the-create---update--get--delete-apis-of-user-service;verifying-the-update-user-api-\u003ctest-scenario-name\u003e;;3",
        "after": [
          {
            "result": {
              "duration": 995000,
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.afterScenario()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1658261800,
              "status": "passed"
            },
            "line": 36,
            "name": "User Invoke the \"UPDATE\" User API service to execute the \"putUser_invalid_Username_validBodyDefined_Is_Yes\" test scenario",
            "match": {
              "arguments": [
                {
                  "val": "\"UPDATE\"",
                  "offset": 16
                },
                {
                  "val": "\"putUser_invalid_Username_validBodyDefined_Is_Yes\"",
                  "offset": 57
                }
              ],
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.get_user_api_service_called(java.lang.String,java.lang.String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "error_message": "java.lang.AssertionError: Expected status code is not match with actual status code expected [404] but found [200]\r\n\tat com.cloudmore.listener.DryRunPlugin.stepFinished(DryRunPlugin.java:120)\r\n\tat io.cucumber.core.eventbus.AbstractEventPublisher.send(AbstractEventPublisher.java:51)\r\n\tat io.cucumber.core.eventbus.AbstractEventBus.send(AbstractEventBus.java:12)\r\n\tat io.cucumber.core.runtime.SynchronizedEventBus.send(SynchronizedEventBus.java:47)\r\n\tat io.cucumber.core.runtime.ThreadLocalRunnerSupplier$LocalEventBus.send(ThreadLocalRunnerSupplier.java:66)\r\n\tat io.cucumber.core.runner.TestStep.emitTestStepFinished(TestStep.java:124)\r\n\tat io.cucumber.core.runner.TestStep.run(TestStep.java:74)\r\n\tat io.cucumber.core.runner.PickleStepTestStep.run(PickleStepTestStep.java:51)\r\n\tat io.cucumber.core.runner.TestCase.run(TestCase.java:104)\r\n\tat io.cucumber.core.runner.Runner.runPickle(Runner.java:73)\r\n\tat io.cucumber.testng.TestNGCucumberRunner.lambda$runScenario$0(TestNGCucumberRunner.java:117)\r\n\tat io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:117)\r\n\tat io.cucumber.testng.TestNGCucumberRunner.runScenario(TestNGCucumberRunner.java:114)\r\n\tat io.cucumber.testng.AbstractTestNGCucumberTests.runScenario(AbstractTestNGCucumberTests.java:31)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor149.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)\r\n\tat org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)\r\n\tat org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)\r\n\tat org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)\r\n\tat org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)\r\n\tat org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:794)\r\n\tat org.testng.TestRunner.run(TestRunner.java:596)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:377)\r\n\tat org.testng.SuiteRunner.access$000(SuiteRunner.java:28)\r\n\tat org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)\r\n\tat org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)\r\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\r\n\tat java.base/java.lang.Thread.run(Thread.java:834)\r\n",
              "duration": 1000200,
              "status": "failed"
            },
            "line": 37,
            "name": "Validate the Response Status Code",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseStatusCode()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 817200,
              "status": "skipped"
            },
            "line": 38,
            "name": "Validate the response json schema",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validate_json_schema()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 859000,
              "status": "skipped"
            },
            "line": 39,
            "name": "Validate the Response Body",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseBody()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@API"
          },
          {
            "name": "@QuestionThree"
          },
          {
            "name": "@assignment"
          },
          {
            "name": "@updateUserAPI"
          },
          {
            "name": "@API"
          }
        ]
      },
      {
        "start_timestamp": "2023-02-20T09:42:13.918Z",
        "before": [
          {
            "result": {
              "duration": 999900,
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.beforeScenario(io.cucumber.java.Scenario)"
            }
          }
        ],
        "line": 43,
        "name": "Verifying the UPDATE USER API putUser_invalid_Username_validBodyDefined_Is_Yes",
        "description": "",
        "id": "verify-the-create---update--get--delete-apis-of-user-service;verifying-the-update-user-api-\u003ctest-scenario-name\u003e;;3",
        "after": [
          {
            "result": {
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.afterScenario()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1598688700,
              "status": "passed"
            },
            "line": 36,
            "name": "User Invoke the \"UPDATE\" User API service to execute the \"putUser_invalid_Username_validBodyDefined_Is_Yes\" test scenario",
            "match": {
              "arguments": [
                {
                  "val": "\"UPDATE\"",
                  "offset": 16
                },
                {
                  "val": "\"putUser_invalid_Username_validBodyDefined_Is_Yes\"",
                  "offset": 57
                }
              ],
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.get_user_api_service_called(java.lang.String,java.lang.String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "error_message": "java.lang.AssertionError: Expected status code is not match with actual status code expected [404] but found [200]\r\n\tat com.cloudmore.listener.DryRunPlugin.stepFinished(DryRunPlugin.java:120)\r\n\tat io.cucumber.core.eventbus.AbstractEventPublisher.send(AbstractEventPublisher.java:51)\r\n\tat io.cucumber.core.eventbus.AbstractEventBus.send(AbstractEventBus.java:12)\r\n\tat io.cucumber.core.runtime.SynchronizedEventBus.send(SynchronizedEventBus.java:47)\r\n\tat io.cucumber.core.runtime.ThreadLocalRunnerSupplier$LocalEventBus.send(ThreadLocalRunnerSupplier.java:66)\r\n\tat io.cucumber.core.runner.TestStep.emitTestStepFinished(TestStep.java:124)\r\n\tat io.cucumber.core.runner.TestStep.run(TestStep.java:74)\r\n\tat io.cucumber.core.runner.PickleStepTestStep.run(PickleStepTestStep.java:51)\r\n\tat io.cucumber.core.runner.TestCase.run(TestCase.java:104)\r\n\tat io.cucumber.core.runner.Runner.runPickle(Runner.java:73)\r\n\tat io.cucumber.testng.TestNGCucumberRunner.lambda$runScenario$0(TestNGCucumberRunner.java:117)\r\n\tat io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:117)\r\n\tat io.cucumber.testng.TestNGCucumberRunner.runScenario(TestNGCucumberRunner.java:114)\r\n\tat io.cucumber.testng.AbstractTestNGCucumberTests.runScenario(AbstractTestNGCucumberTests.java:31)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor149.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)\r\n\tat org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)\r\n\tat org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)\r\n\tat org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)\r\n\tat org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)\r\n\tat org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:794)\r\n\tat org.testng.TestRunner.run(TestRunner.java:596)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:377)\r\n\tat org.testng.SuiteRunner.access$000(SuiteRunner.java:28)\r\n\tat org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)\r\n\tat org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)\r\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\r\n\tat java.base/java.lang.Thread.run(Thread.java:834)\r\n",
              "duration": 849700,
              "status": "failed"
            },
            "line": 37,
            "name": "Validate the Response Status Code",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseStatusCode()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1223800,
              "status": "skipped"
            },
            "line": 38,
            "name": "Validate the response json schema",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validate_json_schema()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1000600,
              "status": "skipped"
            },
            "line": 39,
            "name": "Validate the Response Body",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseBody()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@API"
          },
          {
            "name": "@QuestionThree"
          },
          {
            "name": "@assignment"
          },
          {
            "name": "@updateUserAPI"
          },
          {
            "name": "@API"
          }
        ]
      },
      {
        "start_timestamp": "2023-02-20T09:42:15.551Z",
        "before": [
          {
            "result": {
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.beforeScenario(io.cucumber.java.Scenario)"
            }
          }
        ],
        "line": 44,
        "name": "Verifying the UPDATE USER API putUser_username_Is_Null_validBodyDefined_Is_Yes",
        "description": "",
        "id": "verify-the-create---update--get--delete-apis-of-user-service;verifying-the-update-user-api-\u003ctest-scenario-name\u003e;;4",
        "after": [
          {
            "result": {
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.afterScenario()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1704405100,
              "status": "passed"
            },
            "line": 36,
            "name": "User Invoke the \"UPDATE\" User API service to execute the \"putUser_username_Is_Null_validBodyDefined_Is_Yes\" test scenario",
            "match": {
              "arguments": [
                {
                  "val": "\"UPDATE\"",
                  "offset": 16
                },
                {
                  "val": "\"putUser_username_Is_Null_validBodyDefined_Is_Yes\"",
                  "offset": 57
                }
              ],
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.get_user_api_service_called(java.lang.String,java.lang.String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1200400,
              "status": "passed"
            },
            "line": 37,
            "name": "Validate the Response Status Code",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseStatusCode()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "error_message": "java.lang.AssertionError: 1 expectation failed.\nResponse body doesn\u0027t match expectation.\nExpected: The content to match the given JSON schema.\nerror: object has missing required properties ([\"message\"])\n    level: \"error\"\n    schema: {\"loadingURI\":\"#\",\"pointer\":\"\"}\n    instance: {\"pointer\":\"\"}\n    domain: \"validation\"\n    keyword: \"required\"\n    required: [\"code\",\"message\",\"type\"]\n    missing: [\"message\"]\n\n  Actual: {\"code\":405,\"type\":\"unknown\"}\n\r\n\tat com.cloudmore.listener.DryRunPlugin.stepFinished(DryRunPlugin.java:120)\r\n\tat io.cucumber.core.eventbus.AbstractEventPublisher.send(AbstractEventPublisher.java:51)\r\n\tat io.cucumber.core.eventbus.AbstractEventBus.send(AbstractEventBus.java:12)\r\n\tat io.cucumber.core.runtime.SynchronizedEventBus.send(SynchronizedEventBus.java:47)\r\n\tat io.cucumber.core.runtime.ThreadLocalRunnerSupplier$LocalEventBus.send(ThreadLocalRunnerSupplier.java:66)\r\n\tat io.cucumber.core.runner.TestStep.emitTestStepFinished(TestStep.java:124)\r\n\tat io.cucumber.core.runner.TestStep.run(TestStep.java:74)\r\n\tat io.cucumber.core.runner.PickleStepTestStep.run(PickleStepTestStep.java:51)\r\n\tat io.cucumber.core.runner.TestCase.run(TestCase.java:104)\r\n\tat io.cucumber.core.runner.Runner.runPickle(Runner.java:73)\r\n\tat io.cucumber.testng.TestNGCucumberRunner.lambda$runScenario$0(TestNGCucumberRunner.java:117)\r\n\tat io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:117)\r\n\tat io.cucumber.testng.TestNGCucumberRunner.runScenario(TestNGCucumberRunner.java:114)\r\n\tat io.cucumber.testng.AbstractTestNGCucumberTests.runScenario(AbstractTestNGCucumberTests.java:31)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor149.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)\r\n\tat org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)\r\n\tat org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)\r\n\tat org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)\r\n\tat org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)\r\n\tat org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:794)\r\n\tat org.testng.TestRunner.run(TestRunner.java:596)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:377)\r\n\tat org.testng.SuiteRunner.access$000(SuiteRunner.java:28)\r\n\tat org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)\r\n\tat org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)\r\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\r\n\tat java.base/java.lang.Thread.run(Thread.java:834)\r\n",
              "duration": 6925500,
              "status": "failed"
            },
            "line": 38,
            "name": "Validate the response json schema",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validate_json_schema()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1000900,
              "status": "skipped"
            },
            "line": 39,
            "name": "Validate the Response Body",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseBody()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@API"
          },
          {
            "name": "@QuestionThree"
          },
          {
            "name": "@assignment"
          },
          {
            "name": "@updateUserAPI"
          },
          {
            "name": "@API"
          }
        ]
      },
      {
        "start_timestamp": "2023-02-20T09:42:17.283Z",
        "before": [
          {
            "result": {
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.beforeScenario(io.cucumber.java.Scenario)"
            }
          }
        ],
        "line": 44,
        "name": "Verifying the UPDATE USER API putUser_username_Is_Null_validBodyDefined_Is_Yes",
        "description": "",
        "id": "verify-the-create---update--get--delete-apis-of-user-service;verifying-the-update-user-api-\u003ctest-scenario-name\u003e;;4",
        "after": [
          {
            "result": {
              "duration": 705800,
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.afterScenario()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1509483100,
              "status": "passed"
            },
            "line": 36,
            "name": "User Invoke the \"UPDATE\" User API service to execute the \"putUser_username_Is_Null_validBodyDefined_Is_Yes\" test scenario",
            "match": {
              "arguments": [
                {
                  "val": "\"UPDATE\"",
                  "offset": 16
                },
                {
                  "val": "\"putUser_username_Is_Null_validBodyDefined_Is_Yes\"",
                  "offset": 57
                }
              ],
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.get_user_api_service_called(java.lang.String,java.lang.String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 615500,
              "status": "passed"
            },
            "line": 37,
            "name": "Validate the Response Status Code",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseStatusCode()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "error_message": "java.lang.AssertionError: 1 expectation failed.\nResponse body doesn\u0027t match expectation.\nExpected: The content to match the given JSON schema.\nerror: object has missing required properties ([\"message\"])\n    level: \"error\"\n    schema: {\"loadingURI\":\"#\",\"pointer\":\"\"}\n    instance: {\"pointer\":\"\"}\n    domain: \"validation\"\n    keyword: \"required\"\n    required: [\"code\",\"message\",\"type\"]\n    missing: [\"message\"]\n\n  Actual: {\"code\":405,\"type\":\"unknown\"}\n\r\n\tat com.cloudmore.listener.DryRunPlugin.stepFinished(DryRunPlugin.java:120)\r\n\tat io.cucumber.core.eventbus.AbstractEventPublisher.send(AbstractEventPublisher.java:51)\r\n\tat io.cucumber.core.eventbus.AbstractEventBus.send(AbstractEventBus.java:12)\r\n\tat io.cucumber.core.runtime.SynchronizedEventBus.send(SynchronizedEventBus.java:47)\r\n\tat io.cucumber.core.runtime.ThreadLocalRunnerSupplier$LocalEventBus.send(ThreadLocalRunnerSupplier.java:66)\r\n\tat io.cucumber.core.runner.TestStep.emitTestStepFinished(TestStep.java:124)\r\n\tat io.cucumber.core.runner.TestStep.run(TestStep.java:74)\r\n\tat io.cucumber.core.runner.PickleStepTestStep.run(PickleStepTestStep.java:51)\r\n\tat io.cucumber.core.runner.TestCase.run(TestCase.java:104)\r\n\tat io.cucumber.core.runner.Runner.runPickle(Runner.java:73)\r\n\tat io.cucumber.testng.TestNGCucumberRunner.lambda$runScenario$0(TestNGCucumberRunner.java:117)\r\n\tat io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:117)\r\n\tat io.cucumber.testng.TestNGCucumberRunner.runScenario(TestNGCucumberRunner.java:114)\r\n\tat io.cucumber.testng.AbstractTestNGCucumberTests.runScenario(AbstractTestNGCucumberTests.java:31)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor149.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)\r\n\tat org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)\r\n\tat org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)\r\n\tat org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)\r\n\tat org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)\r\n\tat org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:794)\r\n\tat org.testng.TestRunner.run(TestRunner.java:596)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:377)\r\n\tat org.testng.SuiteRunner.access$000(SuiteRunner.java:28)\r\n\tat org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)\r\n\tat org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)\r\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\r\n\tat java.base/java.lang.Thread.run(Thread.java:834)\r\n",
              "duration": 10994300,
              "status": "failed"
            },
            "line": 38,
            "name": "Validate the response json schema",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validate_json_schema()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 39,
            "name": "Validate the Response Body",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseBody()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@API"
          },
          {
            "name": "@QuestionThree"
          },
          {
            "name": "@assignment"
          },
          {
            "name": "@updateUserAPI"
          },
          {
            "name": "@API"
          }
        ]
      },
      {
        "start_timestamp": "2023-02-20T09:42:18.837Z",
        "before": [
          {
            "result": {
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.beforeScenario(io.cucumber.java.Scenario)"
            }
          }
        ],
        "line": 45,
        "name": "Verifying the UPDATE USER API putUser_username_with_special_Characters_validBodyDefined_Is_Yes",
        "description": "",
        "id": "verify-the-create---update--get--delete-apis-of-user-service;verifying-the-update-user-api-\u003ctest-scenario-name\u003e;;5",
        "after": [
          {
            "result": {
              "duration": 1001900,
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.afterScenario()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1662544900,
              "status": "passed"
            },
            "line": 36,
            "name": "User Invoke the \"UPDATE\" User API service to execute the \"putUser_username_with_special_Characters_validBodyDefined_Is_Yes\" test scenario",
            "match": {
              "arguments": [
                {
                  "val": "\"UPDATE\"",
                  "offset": 16
                },
                {
                  "val": "\"putUser_username_with_special_Characters_validBodyDefined_Is_Yes\"",
                  "offset": 57
                }
              ],
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.get_user_api_service_called(java.lang.String,java.lang.String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "error_message": "java.lang.AssertionError: Expected status code is not match with actual status code expected [404] but found [200]\r\n\tat com.cloudmore.listener.DryRunPlugin.stepFinished(DryRunPlugin.java:120)\r\n\tat io.cucumber.core.eventbus.AbstractEventPublisher.send(AbstractEventPublisher.java:51)\r\n\tat io.cucumber.core.eventbus.AbstractEventBus.send(AbstractEventBus.java:12)\r\n\tat io.cucumber.core.runtime.SynchronizedEventBus.send(SynchronizedEventBus.java:47)\r\n\tat io.cucumber.core.runtime.ThreadLocalRunnerSupplier$LocalEventBus.send(ThreadLocalRunnerSupplier.java:66)\r\n\tat io.cucumber.core.runner.TestStep.emitTestStepFinished(TestStep.java:124)\r\n\tat io.cucumber.core.runner.TestStep.run(TestStep.java:74)\r\n\tat io.cucumber.core.runner.PickleStepTestStep.run(PickleStepTestStep.java:51)\r\n\tat io.cucumber.core.runner.TestCase.run(TestCase.java:104)\r\n\tat io.cucumber.core.runner.Runner.runPickle(Runner.java:73)\r\n\tat io.cucumber.testng.TestNGCucumberRunner.lambda$runScenario$0(TestNGCucumberRunner.java:117)\r\n\tat io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:117)\r\n\tat io.cucumber.testng.TestNGCucumberRunner.runScenario(TestNGCucumberRunner.java:114)\r\n\tat io.cucumber.testng.AbstractTestNGCucumberTests.runScenario(AbstractTestNGCucumberTests.java:31)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor149.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)\r\n\tat org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)\r\n\tat org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)\r\n\tat org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)\r\n\tat org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)\r\n\tat org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:794)\r\n\tat org.testng.TestRunner.run(TestRunner.java:596)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:377)\r\n\tat org.testng.SuiteRunner.access$000(SuiteRunner.java:28)\r\n\tat org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)\r\n\tat org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)\r\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\r\n\tat java.base/java.lang.Thread.run(Thread.java:834)\r\n",
              "duration": 759900,
              "status": "failed"
            },
            "line": 37,
            "name": "Validate the Response Status Code",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseStatusCode()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 835400,
              "status": "skipped"
            },
            "line": 38,
            "name": "Validate the response json schema",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validate_json_schema()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 39,
            "name": "Validate the Response Body",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseBody()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@API"
          },
          {
            "name": "@QuestionThree"
          },
          {
            "name": "@assignment"
          },
          {
            "name": "@updateUserAPI"
          },
          {
            "name": "@API"
          }
        ]
      },
      {
        "start_timestamp": "2023-02-20T09:42:20.560Z",
        "before": [
          {
            "result": {
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.beforeScenario(io.cucumber.java.Scenario)"
            }
          }
        ],
        "line": 45,
        "name": "Verifying the UPDATE USER API putUser_username_with_special_Characters_validBodyDefined_Is_Yes",
        "description": "",
        "id": "verify-the-create---update--get--delete-apis-of-user-service;verifying-the-update-user-api-\u003ctest-scenario-name\u003e;;5",
        "after": [
          {
            "result": {
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.afterScenario()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1510271000,
              "status": "passed"
            },
            "line": 36,
            "name": "User Invoke the \"UPDATE\" User API service to execute the \"putUser_username_with_special_Characters_validBodyDefined_Is_Yes\" test scenario",
            "match": {
              "arguments": [
                {
                  "val": "\"UPDATE\"",
                  "offset": 16
                },
                {
                  "val": "\"putUser_username_with_special_Characters_validBodyDefined_Is_Yes\"",
                  "offset": 57
                }
              ],
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.get_user_api_service_called(java.lang.String,java.lang.String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "error_message": "java.lang.AssertionError: Expected status code is not match with actual status code expected [404] but found [200]\r\n\tat com.cloudmore.listener.DryRunPlugin.stepFinished(DryRunPlugin.java:120)\r\n\tat io.cucumber.core.eventbus.AbstractEventPublisher.send(AbstractEventPublisher.java:51)\r\n\tat io.cucumber.core.eventbus.AbstractEventBus.send(AbstractEventBus.java:12)\r\n\tat io.cucumber.core.runtime.SynchronizedEventBus.send(SynchronizedEventBus.java:47)\r\n\tat io.cucumber.core.runtime.ThreadLocalRunnerSupplier$LocalEventBus.send(ThreadLocalRunnerSupplier.java:66)\r\n\tat io.cucumber.core.runner.TestStep.emitTestStepFinished(TestStep.java:124)\r\n\tat io.cucumber.core.runner.TestStep.run(TestStep.java:74)\r\n\tat io.cucumber.core.runner.PickleStepTestStep.run(PickleStepTestStep.java:51)\r\n\tat io.cucumber.core.runner.TestCase.run(TestCase.java:104)\r\n\tat io.cucumber.core.runner.Runner.runPickle(Runner.java:73)\r\n\tat io.cucumber.testng.TestNGCucumberRunner.lambda$runScenario$0(TestNGCucumberRunner.java:117)\r\n\tat io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:117)\r\n\tat io.cucumber.testng.TestNGCucumberRunner.runScenario(TestNGCucumberRunner.java:114)\r\n\tat io.cucumber.testng.AbstractTestNGCucumberTests.runScenario(AbstractTestNGCucumberTests.java:31)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor149.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)\r\n\tat org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)\r\n\tat org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)\r\n\tat org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)\r\n\tat org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)\r\n\tat org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:794)\r\n\tat org.testng.TestRunner.run(TestRunner.java:596)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:377)\r\n\tat org.testng.SuiteRunner.access$000(SuiteRunner.java:28)\r\n\tat org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)\r\n\tat org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)\r\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\r\n\tat java.base/java.lang.Thread.run(Thread.java:834)\r\n",
              "duration": 797100,
              "status": "failed"
            },
            "line": 37,
            "name": "Validate the Response Status Code",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseStatusCode()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1030900,
              "status": "skipped"
            },
            "line": 38,
            "name": "Validate the response json schema",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validate_json_schema()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 420900,
              "status": "skipped"
            },
            "line": 39,
            "name": "Validate the Response Body",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseBody()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@API"
          },
          {
            "name": "@QuestionThree"
          },
          {
            "name": "@assignment"
          },
          {
            "name": "@updateUserAPI"
          },
          {
            "name": "@API"
          }
        ]
      },
      {
        "start_timestamp": "2023-02-20T09:42:22.100Z",
        "before": [
          {
            "result": {
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.beforeScenario(io.cucumber.java.Scenario)"
            }
          }
        ],
        "line": 46,
        "name": "Verifying the UPDATE USER API putUser_valid_Username_BodyDefined_Is_No",
        "description": "",
        "id": "verify-the-create---update--get--delete-apis-of-user-service;verifying-the-update-user-api-\u003ctest-scenario-name\u003e;;6",
        "after": [
          {
            "result": {
              "duration": 999800,
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.afterScenario()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1517010200,
              "status": "passed"
            },
            "line": 36,
            "name": "User Invoke the \"UPDATE\" User API service to execute the \"putUser_valid_Username_BodyDefined_Is_No\" test scenario",
            "match": {
              "arguments": [
                {
                  "val": "\"UPDATE\"",
                  "offset": 16
                },
                {
                  "val": "\"putUser_valid_Username_BodyDefined_Is_No\"",
                  "offset": 57
                }
              ],
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.get_user_api_service_called(java.lang.String,java.lang.String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 870300,
              "status": "passed"
            },
            "line": 37,
            "name": "Validate the Response Status Code",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseStatusCode()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 13421500,
              "status": "passed"
            },
            "line": 38,
            "name": "Validate the response json schema",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validate_json_schema()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 778100,
              "status": "passed"
            },
            "line": 39,
            "name": "Validate the Response Body",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseBody()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@API"
          },
          {
            "name": "@QuestionThree"
          },
          {
            "name": "@assignment"
          },
          {
            "name": "@updateUserAPI"
          },
          {
            "name": "@API"
          }
        ]
      },
      {
        "start_timestamp": "2023-02-20T09:42:23.659Z",
        "before": [
          {
            "result": {
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.beforeScenario(io.cucumber.java.Scenario)"
            }
          }
        ],
        "line": 47,
        "name": "Verifying the UPDATE USER API putUser_invalid_Username_BodyDefined_Is_No",
        "description": "",
        "id": "verify-the-create---update--get--delete-apis-of-user-service;verifying-the-update-user-api-\u003ctest-scenario-name\u003e;;7",
        "after": [
          {
            "result": {
              "duration": 633600,
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.afterScenario()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1483707800,
              "status": "passed"
            },
            "line": 36,
            "name": "User Invoke the \"UPDATE\" User API service to execute the \"putUser_invalid_Username_BodyDefined_Is_No\" test scenario",
            "match": {
              "arguments": [
                {
                  "val": "\"UPDATE\"",
                  "offset": 16
                },
                {
                  "val": "\"putUser_invalid_Username_BodyDefined_Is_No\"",
                  "offset": 57
                }
              ],
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.get_user_api_service_called(java.lang.String,java.lang.String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1394200,
              "status": "passed"
            },
            "line": 37,
            "name": "Validate the Response Status Code",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseStatusCode()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 11316000,
              "status": "passed"
            },
            "line": 38,
            "name": "Validate the response json schema",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validate_json_schema()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1266900,
              "status": "passed"
            },
            "line": 39,
            "name": "Validate the Response Body",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseBody()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@API"
          },
          {
            "name": "@QuestionThree"
          },
          {
            "name": "@assignment"
          },
          {
            "name": "@updateUserAPI"
          },
          {
            "name": "@API"
          }
        ]
      },
      {
        "start_timestamp": "2023-02-20T09:42:25.186Z",
        "before": [
          {
            "result": {
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.beforeScenario(io.cucumber.java.Scenario)"
            }
          }
        ],
        "line": 48,
        "name": "Verifying the UPDATE USER API putUser_valid_Username_BodyApplicationJsonType_Is_NotObject",
        "description": "",
        "id": "verify-the-create---update--get--delete-apis-of-user-service;verifying-the-update-user-api-\u003ctest-scenario-name\u003e;;8",
        "after": [
          {
            "result": {
              "duration": 972600,
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.afterScenario()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1389319600,
              "status": "passed"
            },
            "line": 36,
            "name": "User Invoke the \"UPDATE\" User API service to execute the \"putUser_valid_Username_BodyApplicationJsonType_Is_NotObject\" test scenario",
            "match": {
              "arguments": [
                {
                  "val": "\"UPDATE\"",
                  "offset": 16
                },
                {
                  "val": "\"putUser_valid_Username_BodyApplicationJsonType_Is_NotObject\"",
                  "offset": 57
                }
              ],
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.get_user_api_service_called(java.lang.String,java.lang.String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "passed"
            },
            "line": 37,
            "name": "Validate the Response Status Code",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseStatusCode()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 16999200,
              "status": "passed"
            },
            "line": 38,
            "name": "Validate the response json schema",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validate_json_schema()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 2044200,
              "status": "passed"
            },
            "line": 39,
            "name": "Validate the Response Body",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseBody()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@API"
          },
          {
            "name": "@QuestionThree"
          },
          {
            "name": "@assignment"
          },
          {
            "name": "@updateUserAPI"
          },
          {
            "name": "@API"
          }
        ]
      },
      {
        "start_timestamp": "2023-02-20T09:42:26.619Z",
        "before": [
          {
            "result": {
              "duration": 1004400,
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.beforeScenario(io.cucumber.java.Scenario)"
            }
          }
        ],
        "line": 49,
        "name": "Verifying the UPDATE USER API putUser_valid_Username_BodyApplicationJsonType_Are_null",
        "description": "",
        "id": "verify-the-create---update--get--delete-apis-of-user-service;verifying-the-update-user-api-\u003ctest-scenario-name\u003e;;9",
        "after": [
          {
            "result": {
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.afterScenario()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1595107200,
              "status": "passed"
            },
            "line": 36,
            "name": "User Invoke the \"UPDATE\" User API service to execute the \"putUser_valid_Username_BodyApplicationJsonType_Are_null\" test scenario",
            "match": {
              "arguments": [
                {
                  "val": "\"UPDATE\"",
                  "offset": 16
                },
                {
                  "val": "\"putUser_valid_Username_BodyApplicationJsonType_Are_null\"",
                  "offset": 57
                }
              ],
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.get_user_api_service_called(java.lang.String,java.lang.String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "error_message": "java.lang.AssertionError: Expected status code is not match with actual status code expected [400] but found [200]\r\n\tat com.cloudmore.listener.DryRunPlugin.stepFinished(DryRunPlugin.java:120)\r\n\tat io.cucumber.core.eventbus.AbstractEventPublisher.send(AbstractEventPublisher.java:51)\r\n\tat io.cucumber.core.eventbus.AbstractEventBus.send(AbstractEventBus.java:12)\r\n\tat io.cucumber.core.runtime.SynchronizedEventBus.send(SynchronizedEventBus.java:47)\r\n\tat io.cucumber.core.runtime.ThreadLocalRunnerSupplier$LocalEventBus.send(ThreadLocalRunnerSupplier.java:66)\r\n\tat io.cucumber.core.runner.TestStep.emitTestStepFinished(TestStep.java:124)\r\n\tat io.cucumber.core.runner.TestStep.run(TestStep.java:74)\r\n\tat io.cucumber.core.runner.PickleStepTestStep.run(PickleStepTestStep.java:51)\r\n\tat io.cucumber.core.runner.TestCase.run(TestCase.java:104)\r\n\tat io.cucumber.core.runner.Runner.runPickle(Runner.java:73)\r\n\tat io.cucumber.testng.TestNGCucumberRunner.lambda$runScenario$0(TestNGCucumberRunner.java:117)\r\n\tat io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:117)\r\n\tat io.cucumber.testng.TestNGCucumberRunner.runScenario(TestNGCucumberRunner.java:114)\r\n\tat io.cucumber.testng.AbstractTestNGCucumberTests.runScenario(AbstractTestNGCucumberTests.java:31)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor149.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)\r\n\tat org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)\r\n\tat org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)\r\n\tat org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)\r\n\tat org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)\r\n\tat org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:794)\r\n\tat org.testng.TestRunner.run(TestRunner.java:596)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:377)\r\n\tat org.testng.SuiteRunner.access$000(SuiteRunner.java:28)\r\n\tat org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)\r\n\tat org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)\r\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\r\n\tat java.base/java.lang.Thread.run(Thread.java:834)\r\n",
              "duration": 847600,
              "status": "failed"
            },
            "line": 37,
            "name": "Validate the Response Status Code",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseStatusCode()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 1171300,
              "status": "skipped"
            },
            "line": 38,
            "name": "Validate the response json schema",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validate_json_schema()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 39,
            "name": "Validate the Response Body",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseBody()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@API"
          },
          {
            "name": "@QuestionThree"
          },
          {
            "name": "@assignment"
          },
          {
            "name": "@updateUserAPI"
          },
          {
            "name": "@API"
          }
        ]
      },
      {
        "start_timestamp": "2023-02-20T09:42:28.251Z",
        "before": [
          {
            "result": {
              "duration": 1000000,
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.beforeScenario(io.cucumber.java.Scenario)"
            }
          }
        ],
        "line": 49,
        "name": "Verifying the UPDATE USER API putUser_valid_Username_BodyApplicationJsonType_Are_null",
        "description": "",
        "id": "verify-the-create---update--get--delete-apis-of-user-service;verifying-the-update-user-api-\u003ctest-scenario-name\u003e;;9",
        "after": [
          {
            "result": {
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.afterScenario()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1601376600,
              "status": "passed"
            },
            "line": 36,
            "name": "User Invoke the \"UPDATE\" User API service to execute the \"putUser_valid_Username_BodyApplicationJsonType_Are_null\" test scenario",
            "match": {
              "arguments": [
                {
                  "val": "\"UPDATE\"",
                  "offset": 16
                },
                {
                  "val": "\"putUser_valid_Username_BodyApplicationJsonType_Are_null\"",
                  "offset": 57
                }
              ],
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.get_user_api_service_called(java.lang.String,java.lang.String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "error_message": "java.lang.AssertionError: Expected status code is not match with actual status code expected [400] but found [200]\r\n\tat com.cloudmore.listener.DryRunPlugin.stepFinished(DryRunPlugin.java:120)\r\n\tat io.cucumber.core.eventbus.AbstractEventPublisher.send(AbstractEventPublisher.java:51)\r\n\tat io.cucumber.core.eventbus.AbstractEventBus.send(AbstractEventBus.java:12)\r\n\tat io.cucumber.core.runtime.SynchronizedEventBus.send(SynchronizedEventBus.java:47)\r\n\tat io.cucumber.core.runtime.ThreadLocalRunnerSupplier$LocalEventBus.send(ThreadLocalRunnerSupplier.java:66)\r\n\tat io.cucumber.core.runner.TestStep.emitTestStepFinished(TestStep.java:124)\r\n\tat io.cucumber.core.runner.TestStep.run(TestStep.java:74)\r\n\tat io.cucumber.core.runner.PickleStepTestStep.run(PickleStepTestStep.java:51)\r\n\tat io.cucumber.core.runner.TestCase.run(TestCase.java:104)\r\n\tat io.cucumber.core.runner.Runner.runPickle(Runner.java:73)\r\n\tat io.cucumber.testng.TestNGCucumberRunner.lambda$runScenario$0(TestNGCucumberRunner.java:117)\r\n\tat io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:117)\r\n\tat io.cucumber.testng.TestNGCucumberRunner.runScenario(TestNGCucumberRunner.java:114)\r\n\tat io.cucumber.testng.AbstractTestNGCucumberTests.runScenario(AbstractTestNGCucumberTests.java:31)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor149.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)\r\n\tat org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)\r\n\tat org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)\r\n\tat org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)\r\n\tat org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)\r\n\tat org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:794)\r\n\tat org.testng.TestRunner.run(TestRunner.java:596)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:377)\r\n\tat org.testng.SuiteRunner.access$000(SuiteRunner.java:28)\r\n\tat org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)\r\n\tat org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)\r\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\r\n\tat java.base/java.lang.Thread.run(Thread.java:834)\r\n",
              "duration": 998300,
              "status": "failed"
            },
            "line": 37,
            "name": "Validate the Response Status Code",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseStatusCode()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 701400,
              "status": "skipped"
            },
            "line": 38,
            "name": "Validate the response json schema",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validate_json_schema()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 459600,
              "status": "skipped"
            },
            "line": 39,
            "name": "Validate the Response Body",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseBody()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@API"
          },
          {
            "name": "@QuestionThree"
          },
          {
            "name": "@assignment"
          },
          {
            "name": "@updateUserAPI"
          },
          {
            "name": "@API"
          }
        ]
      },
      {
        "start_timestamp": "2023-02-20T09:42:29.886Z",
        "before": [
          {
            "result": {
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.beforeScenario(io.cucumber.java.Scenario)"
            }
          }
        ],
        "line": 60,
        "name": "Verifying the DELETE USER API deleteUser_valid_userNameDefined_isYes",
        "description": "",
        "id": "verify-the-create---update--get--delete-apis-of-user-service;verifying-the-delete-user-api-\u003ctest-scenario-name\u003e;;2",
        "after": [
          {
            "result": {
              "duration": 1282000,
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.afterScenario()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1603482600,
              "status": "passed"
            },
            "line": 54,
            "name": "User Invoke the \"DELETE\" User API service to execute the \"deleteUser_valid_userNameDefined_isYes\" test scenario",
            "match": {
              "arguments": [
                {
                  "val": "\"DELETE\"",
                  "offset": 16
                },
                {
                  "val": "\"deleteUser_valid_userNameDefined_isYes\"",
                  "offset": 57
                }
              ],
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.get_user_api_service_called(java.lang.String,java.lang.String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1003600,
              "status": "passed"
            },
            "line": 55,
            "name": "Validate the Response Status Code",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseStatusCode()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 11995700,
              "status": "passed"
            },
            "line": 56,
            "name": "Validate the response json schema",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validate_json_schema()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "error_message": "java.lang.AssertionError: Expected Response is not match with actual Response body expected [{\n    \"code\": 200,\n    \"type\": \"unknown\",\n    \"message\": \"AkilaTest\"\n}] but found [{\n    \"code\": 200,\n    \"type\": \"unknown\",\n    \"message\": \"AkilaTEST\"\n}]\r\n\tat com.cloudmore.listener.DryRunPlugin.stepFinished(DryRunPlugin.java:120)\r\n\tat io.cucumber.core.eventbus.AbstractEventPublisher.send(AbstractEventPublisher.java:51)\r\n\tat io.cucumber.core.eventbus.AbstractEventBus.send(AbstractEventBus.java:12)\r\n\tat io.cucumber.core.runtime.SynchronizedEventBus.send(SynchronizedEventBus.java:47)\r\n\tat io.cucumber.core.runtime.ThreadLocalRunnerSupplier$LocalEventBus.send(ThreadLocalRunnerSupplier.java:66)\r\n\tat io.cucumber.core.runner.TestStep.emitTestStepFinished(TestStep.java:124)\r\n\tat io.cucumber.core.runner.TestStep.run(TestStep.java:74)\r\n\tat io.cucumber.core.runner.PickleStepTestStep.run(PickleStepTestStep.java:51)\r\n\tat io.cucumber.core.runner.TestCase.run(TestCase.java:104)\r\n\tat io.cucumber.core.runner.Runner.runPickle(Runner.java:73)\r\n\tat io.cucumber.testng.TestNGCucumberRunner.lambda$runScenario$0(TestNGCucumberRunner.java:117)\r\n\tat io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:117)\r\n\tat io.cucumber.testng.TestNGCucumberRunner.runScenario(TestNGCucumberRunner.java:114)\r\n\tat io.cucumber.testng.AbstractTestNGCucumberTests.runScenario(AbstractTestNGCucumberTests.java:31)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor149.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)\r\n\tat org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)\r\n\tat org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)\r\n\tat org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)\r\n\tat org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)\r\n\tat org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:794)\r\n\tat org.testng.TestRunner.run(TestRunner.java:596)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:377)\r\n\tat org.testng.SuiteRunner.access$000(SuiteRunner.java:28)\r\n\tat org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)\r\n\tat org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)\r\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\r\n\tat java.base/java.lang.Thread.run(Thread.java:834)\r\n",
              "duration": 1997200,
              "status": "failed"
            },
            "line": 57,
            "name": "Validate the Response Body",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseBody()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@API"
          },
          {
            "name": "@QuestionThree"
          },
          {
            "name": "@assignment"
          },
          {
            "name": "@deleteUserAPI"
          },
          {
            "name": "@API"
          }
        ]
      },
      {
        "start_timestamp": "2023-02-20T09:42:31.575Z",
        "before": [
          {
            "result": {
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.beforeScenario(io.cucumber.java.Scenario)"
            }
          }
        ],
        "line": 60,
        "name": "Verifying the DELETE USER API deleteUser_valid_userNameDefined_isYes",
        "description": "",
        "id": "verify-the-create---update--get--delete-apis-of-user-service;verifying-the-delete-user-api-\u003ctest-scenario-name\u003e;;2",
        "after": [
          {
            "result": {
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.afterScenario()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1452632600,
              "status": "passed"
            },
            "line": 54,
            "name": "User Invoke the \"DELETE\" User API service to execute the \"deleteUser_valid_userNameDefined_isYes\" test scenario",
            "match": {
              "arguments": [
                {
                  "val": "\"DELETE\"",
                  "offset": 16
                },
                {
                  "val": "\"deleteUser_valid_userNameDefined_isYes\"",
                  "offset": 57
                }
              ],
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.get_user_api_service_called(java.lang.String,java.lang.String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 997500,
              "status": "passed"
            },
            "line": 55,
            "name": "Validate the Response Status Code",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseStatusCode()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 26219700,
              "status": "passed"
            },
            "line": 56,
            "name": "Validate the response json schema",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validate_json_schema()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "error_message": "java.lang.AssertionError: Expected Response is not match with actual Response body expected [{\n    \"code\": 200,\n    \"type\": \"unknown\",\n    \"message\": \"AkilaTest\"\n}] but found [{\n    \"code\": 200,\n    \"type\": \"unknown\",\n    \"message\": \"AkilaTEST\"\n}]\r\n\tat com.cloudmore.listener.DryRunPlugin.stepFinished(DryRunPlugin.java:120)\r\n\tat io.cucumber.core.eventbus.AbstractEventPublisher.send(AbstractEventPublisher.java:51)\r\n\tat io.cucumber.core.eventbus.AbstractEventBus.send(AbstractEventBus.java:12)\r\n\tat io.cucumber.core.runtime.SynchronizedEventBus.send(SynchronizedEventBus.java:47)\r\n\tat io.cucumber.core.runtime.ThreadLocalRunnerSupplier$LocalEventBus.send(ThreadLocalRunnerSupplier.java:66)\r\n\tat io.cucumber.core.runner.TestStep.emitTestStepFinished(TestStep.java:124)\r\n\tat io.cucumber.core.runner.TestStep.run(TestStep.java:74)\r\n\tat io.cucumber.core.runner.PickleStepTestStep.run(PickleStepTestStep.java:51)\r\n\tat io.cucumber.core.runner.TestCase.run(TestCase.java:104)\r\n\tat io.cucumber.core.runner.Runner.runPickle(Runner.java:73)\r\n\tat io.cucumber.testng.TestNGCucumberRunner.lambda$runScenario$0(TestNGCucumberRunner.java:117)\r\n\tat io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:117)\r\n\tat io.cucumber.testng.TestNGCucumberRunner.runScenario(TestNGCucumberRunner.java:114)\r\n\tat io.cucumber.testng.AbstractTestNGCucumberTests.runScenario(AbstractTestNGCucumberTests.java:31)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor149.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)\r\n\tat org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)\r\n\tat org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)\r\n\tat org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)\r\n\tat org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)\r\n\tat org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:794)\r\n\tat org.testng.TestRunner.run(TestRunner.java:596)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:377)\r\n\tat org.testng.SuiteRunner.access$000(SuiteRunner.java:28)\r\n\tat org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)\r\n\tat org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)\r\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\r\n\tat java.base/java.lang.Thread.run(Thread.java:834)\r\n",
              "duration": 1000900,
              "status": "failed"
            },
            "line": 57,
            "name": "Validate the Response Body",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseBody()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@API"
          },
          {
            "name": "@QuestionThree"
          },
          {
            "name": "@assignment"
          },
          {
            "name": "@deleteUserAPI"
          },
          {
            "name": "@API"
          }
        ]
      },
      {
        "start_timestamp": "2023-02-20T09:42:33.073Z",
        "before": [
          {
            "result": {
              "duration": 297500,
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.beforeScenario(io.cucumber.java.Scenario)"
            }
          }
        ],
        "line": 61,
        "name": "Verifying the DELETE USER API deleteUser_invalid_UsernameDefined_Is_Yes",
        "description": "",
        "id": "verify-the-create---update--get--delete-apis-of-user-service;verifying-the-delete-user-api-\u003ctest-scenario-name\u003e;;3",
        "after": [
          {
            "result": {
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.afterScenario()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1797430200,
              "status": "passed"
            },
            "line": 54,
            "name": "User Invoke the \"DELETE\" User API service to execute the \"deleteUser_invalid_UsernameDefined_Is_Yes\" test scenario",
            "match": {
              "arguments": [
                {
                  "val": "\"DELETE\"",
                  "offset": 16
                },
                {
                  "val": "\"deleteUser_invalid_UsernameDefined_Is_Yes\"",
                  "offset": 57
                }
              ],
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.get_user_api_service_called(java.lang.String,java.lang.String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 274100,
              "status": "passed"
            },
            "line": 55,
            "name": "Validate the Response Status Code",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseStatusCode()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "error_message": "java.lang.AssertionError: Got exception when trying to validate the schema files\r\n\tat com.cloudmore.listener.DryRunPlugin.stepFinished(DryRunPlugin.java:120)\r\n\tat io.cucumber.core.eventbus.AbstractEventPublisher.send(AbstractEventPublisher.java:51)\r\n\tat io.cucumber.core.eventbus.AbstractEventBus.send(AbstractEventBus.java:12)\r\n\tat io.cucumber.core.runtime.SynchronizedEventBus.send(SynchronizedEventBus.java:47)\r\n\tat io.cucumber.core.runtime.ThreadLocalRunnerSupplier$LocalEventBus.send(ThreadLocalRunnerSupplier.java:66)\r\n\tat io.cucumber.core.runner.TestStep.emitTestStepFinished(TestStep.java:124)\r\n\tat io.cucumber.core.runner.TestStep.run(TestStep.java:74)\r\n\tat io.cucumber.core.runner.PickleStepTestStep.run(PickleStepTestStep.java:51)\r\n\tat io.cucumber.core.runner.TestCase.run(TestCase.java:104)\r\n\tat io.cucumber.core.runner.Runner.runPickle(Runner.java:73)\r\n\tat io.cucumber.testng.TestNGCucumberRunner.lambda$runScenario$0(TestNGCucumberRunner.java:117)\r\n\tat io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:117)\r\n\tat io.cucumber.testng.TestNGCucumberRunner.runScenario(TestNGCucumberRunner.java:114)\r\n\tat io.cucumber.testng.AbstractTestNGCucumberTests.runScenario(AbstractTestNGCucumberTests.java:31)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor149.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)\r\n\tat org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)\r\n\tat org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)\r\n\tat org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)\r\n\tat org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)\r\n\tat org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:794)\r\n\tat org.testng.TestRunner.run(TestRunner.java:596)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:377)\r\n\tat org.testng.SuiteRunner.access$000(SuiteRunner.java:28)\r\n\tat org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)\r\n\tat org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)\r\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\r\n\tat java.base/java.lang.Thread.run(Thread.java:834)\r\nCaused by: io.restassured.module.jsv.JsonSchemaValidationException: com.fasterxml.jackson.core.JsonParseException: no JSON Text to read from input\n at [Source: (StringReader); line: 1, column: 1]\r\n\tat io.restassured.module.jsv.JsonSchemaValidator.matchesSafely(JsonSchemaValidator.java:233)\r\n\tat io.restassured.module.jsv.JsonSchemaValidator.matchesSafely(JsonSchemaValidator.java:75)\r\n\tat org.hamcrest.TypeSafeMatcher.matches(TypeSafeMatcher.java:67)\r\n\tat org.hamcrest.Matcher$matches.call(Unknown Source)\r\n\tat io.restassured.assertion.BodyMatcher.validate(BodyMatcher.groovy:76)\r\n\tat io.restassured.assertion.BodyMatcher$validate$0.call(Unknown Source)\r\n\tat io.restassured.assertion.BodyMatcherGroup$_validate_closure2.doCall(BodyMatcherGroup.groovy:47)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor303.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)\r\n\tat groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)\r\n\tat org.codehaus.groovy.runtime.metaclass.ClosureMetaClass.invokeMethod(ClosureMetaClass.java:263)\r\n\tat groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)\r\n\tat groovy.lang.Closure.call(Closure.java:412)\r\n\tat groovy.lang.Closure.call(Closure.java:428)\r\n\tat org.codehaus.groovy.runtime.DefaultGroovyMethods.collect(DefaultGroovyMethods.java:3575)\r\n\tat org.codehaus.groovy.runtime.DefaultGroovyMethods.collect(DefaultGroovyMethods.java:3560)\r\n\tat org.codehaus.groovy.runtime.DefaultGroovyMethods.collect(DefaultGroovyMethods.java:3660)\r\n\tat org.codehaus.groovy.runtime.dgm$101.invoke(Unknown Source)\r\n\tat org.codehaus.groovy.runtime.callsite.PojoMetaMethodSite$PojoMetaMethodSiteNoUnwrapNoCoerce.invoke(PojoMetaMethodSite.java:247)\r\n\tat org.codehaus.groovy.runtime.callsite.PojoMetaMethodSite.call(PojoMetaMethodSite.java:56)\r\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:139)\r\n\tat io.restassured.assertion.BodyMatcherGroup.validate(BodyMatcherGroup.groovy:47)\r\n\tat io.restassured.assertion.BodyMatcherGroup$validate$3.call(Unknown Source)\r\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:480)\r\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)\r\n\tat io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:674)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor293.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)\r\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:193)\r\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:61)\r\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:185)\r\n\tat io.restassured.internal.ResponseSpecificationImpl.body(ResponseSpecificationImpl.groovy:98)\r\n\tat io.restassured.internal.ValidatableResponseOptionsImpl.body(ValidatableResponseOptionsImpl.java:238)\r\n\tat io.restassured.internal.ValidatableResponseImpl.super$2$body(ValidatableResponseImpl.groovy)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor292.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)\r\n\tat groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)\r\n\tat groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)\r\n\tat org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:144)\r\n\tat io.restassured.internal.ValidatableResponseImpl.body(ValidatableResponseImpl.groovy:293)\r\n\tat io.restassured.internal.ValidatableResponseImpl.body(ValidatableResponseImpl.groovy)\r\n\tat com.cloudmore.testSteps.api.UserServiceSteps.validate_json_schema(UserServiceSteps.java:104)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor290.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat io.cucumber.java.Invoker.doInvoke(Invoker.java:66)\r\n\tat io.cucumber.java.Invoker.invoke(Invoker.java:24)\r\n\tat io.cucumber.java.AbstractGlueDefinition.invokeMethod(AbstractGlueDefinition.java:47)\r\n\tat io.cucumber.java.JavaStepDefinition.execute(JavaStepDefinition.java:29)\r\n\tat io.cucumber.core.runner.CoreStepDefinition.execute(CoreStepDefinition.java:66)\r\n\tat io.cucumber.core.runner.PickleStepDefinitionMatch.runStep(PickleStepDefinitionMatch.java:63)\r\n\tat io.cucumber.core.runner.ExecutionMode$1.execute(ExecutionMode.java:10)\r\n\tat io.cucumber.core.runner.TestStep.executeStep(TestStep.java:92)\r\n\tat io.cucumber.core.runner.TestStep.run(TestStep.java:64)\r\n\t... 29 more\r\nCaused by: com.fasterxml.jackson.core.JsonParseException: no JSON Text to read from input\n at [Source: (StringReader); line: 1, column: 1]\r\n\tat com.github.fge.jackson.JsonNodeReader$JsonParseExceptionBuilder.build(JsonNodeReader.java:198)\r\n\tat com.github.fge.jackson.JsonNodeReader.readNode(JsonNodeReader.java:150)\r\n\tat com.github.fge.jackson.JsonNodeReader.fromReader(JsonNodeReader.java:129)\r\n\tat com.github.fge.jackson.JsonLoader.fromReader(JsonLoader.java:186)\r\n\tat com.github.fge.jackson.JsonLoader.fromString(JsonLoader.java:199)\r\n\tat io.restassured.module.jsv.JsonSchemaValidator.matchesSafely(JsonSchemaValidator.java:214)\r\n\t... 88 more\r\n",
              "duration": 8964400,
              "status": "failed"
            },
            "line": 56,
            "name": "Validate the response json schema",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validate_json_schema()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 57,
            "name": "Validate the Response Body",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseBody()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@API"
          },
          {
            "name": "@QuestionThree"
          },
          {
            "name": "@assignment"
          },
          {
            "name": "@deleteUserAPI"
          },
          {
            "name": "@API"
          }
        ]
      },
      {
        "start_timestamp": "2023-02-20T09:42:34.917Z",
        "before": [
          {
            "result": {
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.beforeScenario(io.cucumber.java.Scenario)"
            }
          }
        ],
        "line": 61,
        "name": "Verifying the DELETE USER API deleteUser_invalid_UsernameDefined_Is_Yes",
        "description": "",
        "id": "verify-the-create---update--get--delete-apis-of-user-service;verifying-the-delete-user-api-\u003ctest-scenario-name\u003e;;3",
        "after": [
          {
            "result": {
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.afterScenario()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1588786200,
              "status": "passed"
            },
            "line": 54,
            "name": "User Invoke the \"DELETE\" User API service to execute the \"deleteUser_invalid_UsernameDefined_Is_Yes\" test scenario",
            "match": {
              "arguments": [
                {
                  "val": "\"DELETE\"",
                  "offset": 16
                },
                {
                  "val": "\"deleteUser_invalid_UsernameDefined_Is_Yes\"",
                  "offset": 57
                }
              ],
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.get_user_api_service_called(java.lang.String,java.lang.String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 862600,
              "status": "passed"
            },
            "line": 55,
            "name": "Validate the Response Status Code",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseStatusCode()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "error_message": "java.lang.AssertionError: Got exception when trying to validate the schema files\r\n\tat com.cloudmore.listener.DryRunPlugin.stepFinished(DryRunPlugin.java:120)\r\n\tat io.cucumber.core.eventbus.AbstractEventPublisher.send(AbstractEventPublisher.java:51)\r\n\tat io.cucumber.core.eventbus.AbstractEventBus.send(AbstractEventBus.java:12)\r\n\tat io.cucumber.core.runtime.SynchronizedEventBus.send(SynchronizedEventBus.java:47)\r\n\tat io.cucumber.core.runtime.ThreadLocalRunnerSupplier$LocalEventBus.send(ThreadLocalRunnerSupplier.java:66)\r\n\tat io.cucumber.core.runner.TestStep.emitTestStepFinished(TestStep.java:124)\r\n\tat io.cucumber.core.runner.TestStep.run(TestStep.java:74)\r\n\tat io.cucumber.core.runner.PickleStepTestStep.run(PickleStepTestStep.java:51)\r\n\tat io.cucumber.core.runner.TestCase.run(TestCase.java:104)\r\n\tat io.cucumber.core.runner.Runner.runPickle(Runner.java:73)\r\n\tat io.cucumber.testng.TestNGCucumberRunner.lambda$runScenario$0(TestNGCucumberRunner.java:117)\r\n\tat io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:117)\r\n\tat io.cucumber.testng.TestNGCucumberRunner.runScenario(TestNGCucumberRunner.java:114)\r\n\tat io.cucumber.testng.AbstractTestNGCucumberTests.runScenario(AbstractTestNGCucumberTests.java:31)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor149.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)\r\n\tat org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)\r\n\tat org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)\r\n\tat org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)\r\n\tat org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)\r\n\tat org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:794)\r\n\tat org.testng.TestRunner.run(TestRunner.java:596)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:377)\r\n\tat org.testng.SuiteRunner.access$000(SuiteRunner.java:28)\r\n\tat org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)\r\n\tat org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)\r\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\r\n\tat java.base/java.lang.Thread.run(Thread.java:834)\r\nCaused by: io.restassured.module.jsv.JsonSchemaValidationException: com.fasterxml.jackson.core.JsonParseException: no JSON Text to read from input\n at [Source: (StringReader); line: 1, column: 1]\r\n\tat io.restassured.module.jsv.JsonSchemaValidator.matchesSafely(JsonSchemaValidator.java:233)\r\n\tat io.restassured.module.jsv.JsonSchemaValidator.matchesSafely(JsonSchemaValidator.java:75)\r\n\tat org.hamcrest.TypeSafeMatcher.matches(TypeSafeMatcher.java:67)\r\n\tat org.hamcrest.Matcher$matches.call(Unknown Source)\r\n\tat io.restassured.assertion.BodyMatcher.validate(BodyMatcher.groovy:76)\r\n\tat io.restassured.assertion.BodyMatcher$validate$0.call(Unknown Source)\r\n\tat io.restassured.assertion.BodyMatcherGroup$_validate_closure2.doCall(BodyMatcherGroup.groovy:47)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor303.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)\r\n\tat groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)\r\n\tat org.codehaus.groovy.runtime.metaclass.ClosureMetaClass.invokeMethod(ClosureMetaClass.java:263)\r\n\tat groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)\r\n\tat groovy.lang.Closure.call(Closure.java:412)\r\n\tat groovy.lang.Closure.call(Closure.java:428)\r\n\tat org.codehaus.groovy.runtime.DefaultGroovyMethods.collect(DefaultGroovyMethods.java:3575)\r\n\tat org.codehaus.groovy.runtime.DefaultGroovyMethods.collect(DefaultGroovyMethods.java:3560)\r\n\tat org.codehaus.groovy.runtime.DefaultGroovyMethods.collect(DefaultGroovyMethods.java:3660)\r\n\tat org.codehaus.groovy.runtime.dgm$101.invoke(Unknown Source)\r\n\tat org.codehaus.groovy.runtime.callsite.PojoMetaMethodSite$PojoMetaMethodSiteNoUnwrapNoCoerce.invoke(PojoMetaMethodSite.java:247)\r\n\tat org.codehaus.groovy.runtime.callsite.PojoMetaMethodSite.call(PojoMetaMethodSite.java:56)\r\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:139)\r\n\tat io.restassured.assertion.BodyMatcherGroup.validate(BodyMatcherGroup.groovy:47)\r\n\tat io.restassured.assertion.BodyMatcherGroup$validate$3.call(Unknown Source)\r\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:480)\r\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)\r\n\tat io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:674)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor293.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)\r\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:193)\r\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:61)\r\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:185)\r\n\tat io.restassured.internal.ResponseSpecificationImpl.body(ResponseSpecificationImpl.groovy:98)\r\n\tat io.restassured.internal.ValidatableResponseOptionsImpl.body(ValidatableResponseOptionsImpl.java:238)\r\n\tat io.restassured.internal.ValidatableResponseImpl.super$2$body(ValidatableResponseImpl.groovy)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor292.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)\r\n\tat groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)\r\n\tat groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)\r\n\tat org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:144)\r\n\tat io.restassured.internal.ValidatableResponseImpl.body(ValidatableResponseImpl.groovy:293)\r\n\tat io.restassured.internal.ValidatableResponseImpl.body(ValidatableResponseImpl.groovy)\r\n\tat com.cloudmore.testSteps.api.UserServiceSteps.validate_json_schema(UserServiceSteps.java:104)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor290.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat io.cucumber.java.Invoker.doInvoke(Invoker.java:66)\r\n\tat io.cucumber.java.Invoker.invoke(Invoker.java:24)\r\n\tat io.cucumber.java.AbstractGlueDefinition.invokeMethod(AbstractGlueDefinition.java:47)\r\n\tat io.cucumber.java.JavaStepDefinition.execute(JavaStepDefinition.java:29)\r\n\tat io.cucumber.core.runner.CoreStepDefinition.execute(CoreStepDefinition.java:66)\r\n\tat io.cucumber.core.runner.PickleStepDefinitionMatch.runStep(PickleStepDefinitionMatch.java:63)\r\n\tat io.cucumber.core.runner.ExecutionMode$1.execute(ExecutionMode.java:10)\r\n\tat io.cucumber.core.runner.TestStep.executeStep(TestStep.java:92)\r\n\tat io.cucumber.core.runner.TestStep.run(TestStep.java:64)\r\n\t... 29 more\r\nCaused by: com.fasterxml.jackson.core.JsonParseException: no JSON Text to read from input\n at [Source: (StringReader); line: 1, column: 1]\r\n\tat com.github.fge.jackson.JsonNodeReader$JsonParseExceptionBuilder.build(JsonNodeReader.java:198)\r\n\tat com.github.fge.jackson.JsonNodeReader.readNode(JsonNodeReader.java:150)\r\n\tat com.github.fge.jackson.JsonNodeReader.fromReader(JsonNodeReader.java:129)\r\n\tat com.github.fge.jackson.JsonLoader.fromReader(JsonLoader.java:186)\r\n\tat com.github.fge.jackson.JsonLoader.fromString(JsonLoader.java:199)\r\n\tat io.restassured.module.jsv.JsonSchemaValidator.matchesSafely(JsonSchemaValidator.java:214)\r\n\t... 88 more\r\n",
              "duration": 6524500,
              "status": "failed"
            },
            "line": 56,
            "name": "Validate the response json schema",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validate_json_schema()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 57,
            "name": "Validate the Response Body",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseBody()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@API"
          },
          {
            "name": "@QuestionThree"
          },
          {
            "name": "@assignment"
          },
          {
            "name": "@deleteUserAPI"
          },
          {
            "name": "@API"
          }
        ]
      },
      {
        "start_timestamp": "2023-02-20T09:42:36.541Z",
        "before": [
          {
            "result": {
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.beforeScenario(io.cucumber.java.Scenario)"
            }
          }
        ],
        "line": 62,
        "name": "Verifying the DELETE USER API deleteUser_invalid_usernameDefined_Is_Yes_with_special_characters",
        "description": "",
        "id": "verify-the-create---update--get--delete-apis-of-user-service;verifying-the-delete-user-api-\u003ctest-scenario-name\u003e;;4",
        "after": [
          {
            "result": {
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.afterScenario()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1706456400,
              "status": "passed"
            },
            "line": 54,
            "name": "User Invoke the \"DELETE\" User API service to execute the \"deleteUser_invalid_usernameDefined_Is_Yes_with_special_characters\" test scenario",
            "match": {
              "arguments": [
                {
                  "val": "\"DELETE\"",
                  "offset": 16
                },
                {
                  "val": "\"deleteUser_invalid_usernameDefined_Is_Yes_with_special_characters\"",
                  "offset": 57
                }
              ],
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.get_user_api_service_called(java.lang.String,java.lang.String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "status": "passed"
            },
            "line": 55,
            "name": "Validate the Response Status Code",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseStatusCode()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "error_message": "java.lang.AssertionError: Got exception when trying to validate the schema files\r\n\tat com.cloudmore.listener.DryRunPlugin.stepFinished(DryRunPlugin.java:120)\r\n\tat io.cucumber.core.eventbus.AbstractEventPublisher.send(AbstractEventPublisher.java:51)\r\n\tat io.cucumber.core.eventbus.AbstractEventBus.send(AbstractEventBus.java:12)\r\n\tat io.cucumber.core.runtime.SynchronizedEventBus.send(SynchronizedEventBus.java:47)\r\n\tat io.cucumber.core.runtime.ThreadLocalRunnerSupplier$LocalEventBus.send(ThreadLocalRunnerSupplier.java:66)\r\n\tat io.cucumber.core.runner.TestStep.emitTestStepFinished(TestStep.java:124)\r\n\tat io.cucumber.core.runner.TestStep.run(TestStep.java:74)\r\n\tat io.cucumber.core.runner.PickleStepTestStep.run(PickleStepTestStep.java:51)\r\n\tat io.cucumber.core.runner.TestCase.run(TestCase.java:104)\r\n\tat io.cucumber.core.runner.Runner.runPickle(Runner.java:73)\r\n\tat io.cucumber.testng.TestNGCucumberRunner.lambda$runScenario$0(TestNGCucumberRunner.java:117)\r\n\tat io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:117)\r\n\tat io.cucumber.testng.TestNGCucumberRunner.runScenario(TestNGCucumberRunner.java:114)\r\n\tat io.cucumber.testng.AbstractTestNGCucumberTests.runScenario(AbstractTestNGCucumberTests.java:31)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor149.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)\r\n\tat org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)\r\n\tat org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)\r\n\tat org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)\r\n\tat org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)\r\n\tat org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:794)\r\n\tat org.testng.TestRunner.run(TestRunner.java:596)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:377)\r\n\tat org.testng.SuiteRunner.access$000(SuiteRunner.java:28)\r\n\tat org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)\r\n\tat org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)\r\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\r\n\tat java.base/java.lang.Thread.run(Thread.java:834)\r\nCaused by: io.restassured.module.jsv.JsonSchemaValidationException: com.fasterxml.jackson.core.JsonParseException: no JSON Text to read from input\n at [Source: (StringReader); line: 1, column: 1]\r\n\tat io.restassured.module.jsv.JsonSchemaValidator.matchesSafely(JsonSchemaValidator.java:233)\r\n\tat io.restassured.module.jsv.JsonSchemaValidator.matchesSafely(JsonSchemaValidator.java:75)\r\n\tat org.hamcrest.TypeSafeMatcher.matches(TypeSafeMatcher.java:67)\r\n\tat org.hamcrest.Matcher$matches.call(Unknown Source)\r\n\tat io.restassured.assertion.BodyMatcher.validate(BodyMatcher.groovy:76)\r\n\tat io.restassured.assertion.BodyMatcher$validate$0.call(Unknown Source)\r\n\tat io.restassured.assertion.BodyMatcherGroup$_validate_closure2.doCall(BodyMatcherGroup.groovy:47)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor303.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)\r\n\tat groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)\r\n\tat org.codehaus.groovy.runtime.metaclass.ClosureMetaClass.invokeMethod(ClosureMetaClass.java:263)\r\n\tat groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)\r\n\tat groovy.lang.Closure.call(Closure.java:412)\r\n\tat groovy.lang.Closure.call(Closure.java:428)\r\n\tat org.codehaus.groovy.runtime.DefaultGroovyMethods.collect(DefaultGroovyMethods.java:3575)\r\n\tat org.codehaus.groovy.runtime.DefaultGroovyMethods.collect(DefaultGroovyMethods.java:3560)\r\n\tat org.codehaus.groovy.runtime.DefaultGroovyMethods.collect(DefaultGroovyMethods.java:3660)\r\n\tat org.codehaus.groovy.runtime.dgm$101.invoke(Unknown Source)\r\n\tat org.codehaus.groovy.runtime.callsite.PojoMetaMethodSite$PojoMetaMethodSiteNoUnwrapNoCoerce.invoke(PojoMetaMethodSite.java:247)\r\n\tat org.codehaus.groovy.runtime.callsite.PojoMetaMethodSite.call(PojoMetaMethodSite.java:56)\r\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:139)\r\n\tat io.restassured.assertion.BodyMatcherGroup.validate(BodyMatcherGroup.groovy:47)\r\n\tat io.restassured.assertion.BodyMatcherGroup$validate$3.call(Unknown Source)\r\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:480)\r\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)\r\n\tat io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:674)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor293.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)\r\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:193)\r\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:61)\r\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:185)\r\n\tat io.restassured.internal.ResponseSpecificationImpl.body(ResponseSpecificationImpl.groovy:98)\r\n\tat io.restassured.internal.ValidatableResponseOptionsImpl.body(ValidatableResponseOptionsImpl.java:238)\r\n\tat io.restassured.internal.ValidatableResponseImpl.super$2$body(ValidatableResponseImpl.groovy)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor292.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)\r\n\tat groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)\r\n\tat groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)\r\n\tat org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:144)\r\n\tat io.restassured.internal.ValidatableResponseImpl.body(ValidatableResponseImpl.groovy:293)\r\n\tat io.restassured.internal.ValidatableResponseImpl.body(ValidatableResponseImpl.groovy)\r\n\tat com.cloudmore.testSteps.api.UserServiceSteps.validate_json_schema(UserServiceSteps.java:104)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor290.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat io.cucumber.java.Invoker.doInvoke(Invoker.java:66)\r\n\tat io.cucumber.java.Invoker.invoke(Invoker.java:24)\r\n\tat io.cucumber.java.AbstractGlueDefinition.invokeMethod(AbstractGlueDefinition.java:47)\r\n\tat io.cucumber.java.JavaStepDefinition.execute(JavaStepDefinition.java:29)\r\n\tat io.cucumber.core.runner.CoreStepDefinition.execute(CoreStepDefinition.java:66)\r\n\tat io.cucumber.core.runner.PickleStepDefinitionMatch.runStep(PickleStepDefinitionMatch.java:63)\r\n\tat io.cucumber.core.runner.ExecutionMode$1.execute(ExecutionMode.java:10)\r\n\tat io.cucumber.core.runner.TestStep.executeStep(TestStep.java:92)\r\n\tat io.cucumber.core.runner.TestStep.run(TestStep.java:64)\r\n\t... 29 more\r\nCaused by: com.fasterxml.jackson.core.JsonParseException: no JSON Text to read from input\n at [Source: (StringReader); line: 1, column: 1]\r\n\tat com.github.fge.jackson.JsonNodeReader$JsonParseExceptionBuilder.build(JsonNodeReader.java:198)\r\n\tat com.github.fge.jackson.JsonNodeReader.readNode(JsonNodeReader.java:150)\r\n\tat com.github.fge.jackson.JsonNodeReader.fromReader(JsonNodeReader.java:129)\r\n\tat com.github.fge.jackson.JsonLoader.fromReader(JsonLoader.java:186)\r\n\tat com.github.fge.jackson.JsonLoader.fromString(JsonLoader.java:199)\r\n\tat io.restassured.module.jsv.JsonSchemaValidator.matchesSafely(JsonSchemaValidator.java:214)\r\n\t... 88 more\r\n",
              "duration": 6130100,
              "status": "failed"
            },
            "line": 56,
            "name": "Validate the response json schema",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validate_json_schema()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 993200,
              "status": "skipped"
            },
            "line": 57,
            "name": "Validate the Response Body",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseBody()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@API"
          },
          {
            "name": "@QuestionThree"
          },
          {
            "name": "@assignment"
          },
          {
            "name": "@deleteUserAPI"
          },
          {
            "name": "@API"
          }
        ]
      },
      {
        "start_timestamp": "2023-02-20T09:42:38.294Z",
        "before": [
          {
            "result": {
              "duration": 1002200,
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.beforeScenario(io.cucumber.java.Scenario)"
            }
          }
        ],
        "line": 62,
        "name": "Verifying the DELETE USER API deleteUser_invalid_usernameDefined_Is_Yes_with_special_characters",
        "description": "",
        "id": "verify-the-create---update--get--delete-apis-of-user-service;verifying-the-delete-user-api-\u003ctest-scenario-name\u003e;;4",
        "after": [
          {
            "result": {
              "duration": 998700,
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.afterScenario()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1358118500,
              "status": "passed"
            },
            "line": 54,
            "name": "User Invoke the \"DELETE\" User API service to execute the \"deleteUser_invalid_usernameDefined_Is_Yes_with_special_characters\" test scenario",
            "match": {
              "arguments": [
                {
                  "val": "\"DELETE\"",
                  "offset": 16
                },
                {
                  "val": "\"deleteUser_invalid_usernameDefined_Is_Yes_with_special_characters\"",
                  "offset": 57
                }
              ],
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.get_user_api_service_called(java.lang.String,java.lang.String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1004900,
              "status": "passed"
            },
            "line": 55,
            "name": "Validate the Response Status Code",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseStatusCode()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "error_message": "java.lang.AssertionError: Got exception when trying to validate the schema files\r\n\tat com.cloudmore.listener.DryRunPlugin.stepFinished(DryRunPlugin.java:120)\r\n\tat io.cucumber.core.eventbus.AbstractEventPublisher.send(AbstractEventPublisher.java:51)\r\n\tat io.cucumber.core.eventbus.AbstractEventBus.send(AbstractEventBus.java:12)\r\n\tat io.cucumber.core.runtime.SynchronizedEventBus.send(SynchronizedEventBus.java:47)\r\n\tat io.cucumber.core.runtime.ThreadLocalRunnerSupplier$LocalEventBus.send(ThreadLocalRunnerSupplier.java:66)\r\n\tat io.cucumber.core.runner.TestStep.emitTestStepFinished(TestStep.java:124)\r\n\tat io.cucumber.core.runner.TestStep.run(TestStep.java:74)\r\n\tat io.cucumber.core.runner.PickleStepTestStep.run(PickleStepTestStep.java:51)\r\n\tat io.cucumber.core.runner.TestCase.run(TestCase.java:104)\r\n\tat io.cucumber.core.runner.Runner.runPickle(Runner.java:73)\r\n\tat io.cucumber.testng.TestNGCucumberRunner.lambda$runScenario$0(TestNGCucumberRunner.java:117)\r\n\tat io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:117)\r\n\tat io.cucumber.testng.TestNGCucumberRunner.runScenario(TestNGCucumberRunner.java:114)\r\n\tat io.cucumber.testng.AbstractTestNGCucumberTests.runScenario(AbstractTestNGCucumberTests.java:31)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor149.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)\r\n\tat org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)\r\n\tat org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)\r\n\tat org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)\r\n\tat org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)\r\n\tat org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:794)\r\n\tat org.testng.TestRunner.run(TestRunner.java:596)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:377)\r\n\tat org.testng.SuiteRunner.access$000(SuiteRunner.java:28)\r\n\tat org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)\r\n\tat org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)\r\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\r\n\tat java.base/java.lang.Thread.run(Thread.java:834)\r\nCaused by: io.restassured.module.jsv.JsonSchemaValidationException: com.fasterxml.jackson.core.JsonParseException: no JSON Text to read from input\n at [Source: (StringReader); line: 1, column: 1]\r\n\tat io.restassured.module.jsv.JsonSchemaValidator.matchesSafely(JsonSchemaValidator.java:233)\r\n\tat io.restassured.module.jsv.JsonSchemaValidator.matchesSafely(JsonSchemaValidator.java:75)\r\n\tat org.hamcrest.TypeSafeMatcher.matches(TypeSafeMatcher.java:67)\r\n\tat org.hamcrest.Matcher$matches.call(Unknown Source)\r\n\tat io.restassured.assertion.BodyMatcher.validate(BodyMatcher.groovy:76)\r\n\tat io.restassured.assertion.BodyMatcher$validate$0.call(Unknown Source)\r\n\tat io.restassured.assertion.BodyMatcherGroup$_validate_closure2.doCall(BodyMatcherGroup.groovy:47)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor303.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)\r\n\tat groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)\r\n\tat org.codehaus.groovy.runtime.metaclass.ClosureMetaClass.invokeMethod(ClosureMetaClass.java:263)\r\n\tat groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)\r\n\tat groovy.lang.Closure.call(Closure.java:412)\r\n\tat groovy.lang.Closure.call(Closure.java:428)\r\n\tat org.codehaus.groovy.runtime.DefaultGroovyMethods.collect(DefaultGroovyMethods.java:3575)\r\n\tat org.codehaus.groovy.runtime.DefaultGroovyMethods.collect(DefaultGroovyMethods.java:3560)\r\n\tat org.codehaus.groovy.runtime.DefaultGroovyMethods.collect(DefaultGroovyMethods.java:3660)\r\n\tat org.codehaus.groovy.runtime.dgm$101.invoke(Unknown Source)\r\n\tat org.codehaus.groovy.runtime.callsite.PojoMetaMethodSite$PojoMetaMethodSiteNoUnwrapNoCoerce.invoke(PojoMetaMethodSite.java:247)\r\n\tat org.codehaus.groovy.runtime.callsite.PojoMetaMethodSite.call(PojoMetaMethodSite.java:56)\r\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:139)\r\n\tat io.restassured.assertion.BodyMatcherGroup.validate(BodyMatcherGroup.groovy:47)\r\n\tat io.restassured.assertion.BodyMatcherGroup$validate$3.call(Unknown Source)\r\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:480)\r\n\tat io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)\r\n\tat io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:674)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor293.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)\r\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:193)\r\n\tat org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:61)\r\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:185)\r\n\tat io.restassured.internal.ResponseSpecificationImpl.body(ResponseSpecificationImpl.groovy:98)\r\n\tat io.restassured.internal.ValidatableResponseOptionsImpl.body(ValidatableResponseOptionsImpl.java:238)\r\n\tat io.restassured.internal.ValidatableResponseImpl.super$2$body(ValidatableResponseImpl.groovy)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor292.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)\r\n\tat groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)\r\n\tat groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)\r\n\tat org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:144)\r\n\tat io.restassured.internal.ValidatableResponseImpl.body(ValidatableResponseImpl.groovy:293)\r\n\tat io.restassured.internal.ValidatableResponseImpl.body(ValidatableResponseImpl.groovy)\r\n\tat com.cloudmore.testSteps.api.UserServiceSteps.validate_json_schema(UserServiceSteps.java:104)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor290.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat io.cucumber.java.Invoker.doInvoke(Invoker.java:66)\r\n\tat io.cucumber.java.Invoker.invoke(Invoker.java:24)\r\n\tat io.cucumber.java.AbstractGlueDefinition.invokeMethod(AbstractGlueDefinition.java:47)\r\n\tat io.cucumber.java.JavaStepDefinition.execute(JavaStepDefinition.java:29)\r\n\tat io.cucumber.core.runner.CoreStepDefinition.execute(CoreStepDefinition.java:66)\r\n\tat io.cucumber.core.runner.PickleStepDefinitionMatch.runStep(PickleStepDefinitionMatch.java:63)\r\n\tat io.cucumber.core.runner.ExecutionMode$1.execute(ExecutionMode.java:10)\r\n\tat io.cucumber.core.runner.TestStep.executeStep(TestStep.java:92)\r\n\tat io.cucumber.core.runner.TestStep.run(TestStep.java:64)\r\n\t... 29 more\r\nCaused by: com.fasterxml.jackson.core.JsonParseException: no JSON Text to read from input\n at [Source: (StringReader); line: 1, column: 1]\r\n\tat com.github.fge.jackson.JsonNodeReader$JsonParseExceptionBuilder.build(JsonNodeReader.java:198)\r\n\tat com.github.fge.jackson.JsonNodeReader.readNode(JsonNodeReader.java:150)\r\n\tat com.github.fge.jackson.JsonNodeReader.fromReader(JsonNodeReader.java:129)\r\n\tat com.github.fge.jackson.JsonLoader.fromReader(JsonLoader.java:186)\r\n\tat com.github.fge.jackson.JsonLoader.fromString(JsonLoader.java:199)\r\n\tat io.restassured.module.jsv.JsonSchemaValidator.matchesSafely(JsonSchemaValidator.java:214)\r\n\t... 88 more\r\n",
              "duration": 7004600,
              "status": "failed"
            },
            "line": 56,
            "name": "Validate the response json schema",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validate_json_schema()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 57,
            "name": "Validate the Response Body",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseBody()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@API"
          },
          {
            "name": "@QuestionThree"
          },
          {
            "name": "@assignment"
          },
          {
            "name": "@deleteUserAPI"
          },
          {
            "name": "@API"
          }
        ]
      },
      {
        "start_timestamp": "2023-02-20T09:42:39.696Z",
        "before": [
          {
            "result": {
              "duration": 626700,
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.beforeScenario(io.cucumber.java.Scenario)"
            }
          }
        ],
        "line": 63,
        "name": "Verifying the DELETE USER API deleteUser_username_Is_Null",
        "description": "",
        "id": "verify-the-create---update--get--delete-apis-of-user-service;verifying-the-delete-user-api-\u003ctest-scenario-name\u003e;;5",
        "after": [
          {
            "result": {
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.afterScenario()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1521017100,
              "status": "passed"
            },
            "line": 54,
            "name": "User Invoke the \"DELETE\" User API service to execute the \"deleteUser_username_Is_Null\" test scenario",
            "match": {
              "arguments": [
                {
                  "val": "\"DELETE\"",
                  "offset": 16
                },
                {
                  "val": "\"deleteUser_username_Is_Null\"",
                  "offset": 57
                }
              ],
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.get_user_api_service_called(java.lang.String,java.lang.String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1870900,
              "status": "passed"
            },
            "line": 55,
            "name": "Validate the Response Status Code",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseStatusCode()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "error_message": "java.lang.AssertionError: 1 expectation failed.\nResponse body doesn\u0027t match expectation.\nExpected: The content to match the given JSON schema.\nerror: object has missing required properties ([\"message\"])\n    level: \"error\"\n    schema: {\"loadingURI\":\"#\",\"pointer\":\"\"}\n    instance: {\"pointer\":\"\"}\n    domain: \"validation\"\n    keyword: \"required\"\n    required: [\"code\",\"message\",\"type\"]\n    missing: [\"message\"]\n\n  Actual: {\"code\":405,\"type\":\"unknown\"}\n\r\n\tat com.cloudmore.listener.DryRunPlugin.stepFinished(DryRunPlugin.java:120)\r\n\tat io.cucumber.core.eventbus.AbstractEventPublisher.send(AbstractEventPublisher.java:51)\r\n\tat io.cucumber.core.eventbus.AbstractEventBus.send(AbstractEventBus.java:12)\r\n\tat io.cucumber.core.runtime.SynchronizedEventBus.send(SynchronizedEventBus.java:47)\r\n\tat io.cucumber.core.runtime.ThreadLocalRunnerSupplier$LocalEventBus.send(ThreadLocalRunnerSupplier.java:66)\r\n\tat io.cucumber.core.runner.TestStep.emitTestStepFinished(TestStep.java:124)\r\n\tat io.cucumber.core.runner.TestStep.run(TestStep.java:74)\r\n\tat io.cucumber.core.runner.PickleStepTestStep.run(PickleStepTestStep.java:51)\r\n\tat io.cucumber.core.runner.TestCase.run(TestCase.java:104)\r\n\tat io.cucumber.core.runner.Runner.runPickle(Runner.java:73)\r\n\tat io.cucumber.testng.TestNGCucumberRunner.lambda$runScenario$0(TestNGCucumberRunner.java:117)\r\n\tat io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:117)\r\n\tat io.cucumber.testng.TestNGCucumberRunner.runScenario(TestNGCucumberRunner.java:114)\r\n\tat io.cucumber.testng.AbstractTestNGCucumberTests.runScenario(AbstractTestNGCucumberTests.java:31)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor149.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)\r\n\tat org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)\r\n\tat org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)\r\n\tat org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)\r\n\tat org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)\r\n\tat org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:794)\r\n\tat org.testng.TestRunner.run(TestRunner.java:596)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:377)\r\n\tat org.testng.SuiteRunner.access$000(SuiteRunner.java:28)\r\n\tat org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)\r\n\tat org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)\r\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\r\n\tat java.base/java.lang.Thread.run(Thread.java:834)\r\n",
              "duration": 14813900,
              "status": "failed"
            },
            "line": 56,
            "name": "Validate the response json schema",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validate_json_schema()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 57,
            "name": "Validate the Response Body",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseBody()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@API"
          },
          {
            "name": "@QuestionThree"
          },
          {
            "name": "@assignment"
          },
          {
            "name": "@deleteUserAPI"
          },
          {
            "name": "@API"
          }
        ]
      },
      {
        "start_timestamp": "2023-02-20T09:42:41.264Z",
        "before": [
          {
            "result": {
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.beforeScenario(io.cucumber.java.Scenario)"
            }
          }
        ],
        "line": 63,
        "name": "Verifying the DELETE USER API deleteUser_username_Is_Null",
        "description": "",
        "id": "verify-the-create---update--get--delete-apis-of-user-service;verifying-the-delete-user-api-\u003ctest-scenario-name\u003e;;5",
        "after": [
          {
            "result": {
              "duration": 227700,
              "status": "passed"
            },
            "match": {
              "location": "void com.cloudmore.testSteps.CommonSteps.afterScenario()"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario Outline",
        "steps": [
          {
            "result": {
              "duration": 1403559000,
              "status": "passed"
            },
            "line": 54,
            "name": "User Invoke the \"DELETE\" User API service to execute the \"deleteUser_username_Is_Null\" test scenario",
            "match": {
              "arguments": [
                {
                  "val": "\"DELETE\"",
                  "offset": 16
                },
                {
                  "val": "\"deleteUser_username_Is_Null\"",
                  "offset": 57
                }
              ],
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.get_user_api_service_called(java.lang.String,java.lang.String)"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 1990300,
              "status": "passed"
            },
            "line": 55,
            "name": "Validate the Response Status Code",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseStatusCode()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "error_message": "java.lang.AssertionError: 1 expectation failed.\nResponse body doesn\u0027t match expectation.\nExpected: The content to match the given JSON schema.\nerror: object has missing required properties ([\"message\"])\n    level: \"error\"\n    schema: {\"loadingURI\":\"#\",\"pointer\":\"\"}\n    instance: {\"pointer\":\"\"}\n    domain: \"validation\"\n    keyword: \"required\"\n    required: [\"code\",\"message\",\"type\"]\n    missing: [\"message\"]\n\n  Actual: {\"code\":405,\"type\":\"unknown\"}\n\r\n\tat com.cloudmore.listener.DryRunPlugin.stepFinished(DryRunPlugin.java:120)\r\n\tat io.cucumber.core.eventbus.AbstractEventPublisher.send(AbstractEventPublisher.java:51)\r\n\tat io.cucumber.core.eventbus.AbstractEventBus.send(AbstractEventBus.java:12)\r\n\tat io.cucumber.core.runtime.SynchronizedEventBus.send(SynchronizedEventBus.java:47)\r\n\tat io.cucumber.core.runtime.ThreadLocalRunnerSupplier$LocalEventBus.send(ThreadLocalRunnerSupplier.java:66)\r\n\tat io.cucumber.core.runner.TestStep.emitTestStepFinished(TestStep.java:124)\r\n\tat io.cucumber.core.runner.TestStep.run(TestStep.java:74)\r\n\tat io.cucumber.core.runner.PickleStepTestStep.run(PickleStepTestStep.java:51)\r\n\tat io.cucumber.core.runner.TestCase.run(TestCase.java:104)\r\n\tat io.cucumber.core.runner.Runner.runPickle(Runner.java:73)\r\n\tat io.cucumber.testng.TestNGCucumberRunner.lambda$runScenario$0(TestNGCucumberRunner.java:117)\r\n\tat io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:117)\r\n\tat io.cucumber.testng.TestNGCucumberRunner.runScenario(TestNGCucumberRunner.java:114)\r\n\tat io.cucumber.testng.AbstractTestNGCucumberTests.runScenario(AbstractTestNGCucumberTests.java:31)\r\n\tat jdk.internal.reflect.GeneratedMethodAccessor149.invoke(Unknown Source)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)\r\n\tat org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)\r\n\tat org.testng.internal.TestInvoker.retryFailed(TestInvoker.java:213)\r\n\tat org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:58)\r\n\tat org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)\r\n\tat org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)\r\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)\r\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\r\n\tat org.testng.TestRunner.privateRun(TestRunner.java:794)\r\n\tat org.testng.TestRunner.run(TestRunner.java:596)\r\n\tat org.testng.SuiteRunner.runTest(SuiteRunner.java:377)\r\n\tat org.testng.SuiteRunner.access$000(SuiteRunner.java:28)\r\n\tat org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)\r\n\tat org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)\r\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\r\n\tat java.base/java.lang.Thread.run(Thread.java:834)\r\n",
              "duration": 13640200,
              "status": "failed"
            },
            "line": 56,
            "name": "Validate the response json schema",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validate_json_schema()"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "status": "skipped"
            },
            "line": 57,
            "name": "Validate the Response Body",
            "match": {
              "location": "com.cloudmore.testSteps.api.UserServiceSteps.validateResponseBody()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@API"
          },
          {
            "name": "@QuestionThree"
          },
          {
            "name": "@assignment"
          },
          {
            "name": "@deleteUserAPI"
          },
          {
            "name": "@API"
          }
        ]
      }
    ],
    "name": "Verify The CREATE , UPDATE, GET, DELETE APIs of User Service",
    "description": "",
    "id": "verify-the-create---update--get--delete-apis-of-user-service",
    "keyword": "Feature",
    "uri": "file:src/test/resources/featureFiles/UserServiceAPI.feature",
    "tags": [
      {
        "name": "@API",
        "type": "Tag",
        "location": {
          "line": 4,
          "column": 1
        }
      },
      {
        "name": "@QuestionThree",
        "type": "Tag",
        "location": {
          "line": 4,
          "column": 6
        }
      },
      {
        "name": "@assignment",
        "type": "Tag",
        "location": {
          "line": 4,
          "column": 21
        }
      }
    ]
  }
]